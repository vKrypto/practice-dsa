{
    "id": 939,
    "description": "You are given an array of non-negative integers nums of length n  and an integer k. In one operation, \nyou may choose any element from nums and increment it by 1. \nReturn the maximum product of nums after at most k operations. Since the answer may \nbe very large, return it modulo 10^9 + 7. \n\nNote that you should maximize the product before taking the modulo. \n\n**Example 1:** \n```\nInput: n = 2, nums = [0,4], k = 5\n\nOutput: 20 \n\nExplanation: Increment the first number 5 times. Now nums = [5, 4], with a product of 5 * 4 = 20. \nIt can be shown that 20 is maximum product possible, so we return 20. Note that there may be \nother ways to increment nums to have the maximum product. \n```\n**Example 2:**\n```\nInput: n = 4, nums = [6,3,3,2], k = 2 \n\nOutput: 216 \n\nExplanation: Increment the second number 1 time and increment the fourth number 1 time. \nNow nums = [6, 4, 3, 3], with a product of 6 * 4 * 3 * 3 = 216. It can be shown that 216 is maximum \nproduct possible, so we return 216. Note that there may be other ways to increment nums to have the maximum product.\n```\n\n**Input Format:**\n```\nThe first line contains an integer n \u2014 the number of elements in the array nums.\nThe second line contains n space-separated integers \u2014 the elements of the array nums.\nThe third line contains an integer k \u2014 the number of increments allowed.\n```\n**Output Format**:\n```\nPrint a single integer \u2014 the maximum product of the array elements after k increments, modulo 10^9 + 7.\n```\n\n**Constraints:** \n\n`1 <= n , k <= 10^5`\n\n`0 <= nums[i] <= 10^6`\n",
    "title": " Maximum Product after Operations",
    "default_testcase": {
        "id": 8243,
        "input": "2\n0 4\n5",
        "expected_output": "20\n",
        "code_problem_id": 939,
        "created_at": "2024-05-24T12:54:55.610Z",
        "updated_at": "2024-05-24T12:54:55.610Z"
    },
    "problem_type": "practice",
    "code_skeletons": [
        {
            "id": 3124,
            "code_problem_id": 939,
            "language": {
                "id": 11,
                "name": "C++ (GCC 9.2.0)",
                "judge0_language_id": 54
            },
            "skeleton_define_class": "class Solution {\npublic:\n    int maximumProduct(int n, vector<int>& nums, int k) {",
            "skeleton_class_end": "}\n};",
            "skeleton_solution_class": ""
        },
        {
            "id": 3125,
            "code_problem_id": 939,
            "language": {
                "id": 25,
                "name": "Java (OpenJDK 13.0.1)",
                "judge0_language_id": 62
            },
            "skeleton_define_class": "\nclass Solution {\n    public int maximumProduct(int n, int[] nums, int k) {",
            "skeleton_class_end": "}\n}",
            "skeleton_solution_class": ""
        },
        {
            "id": 3126,
            "code_problem_id": 939,
            "language": {
                "id": 39,
                "name": "Python (3.8.1)",
                "judge0_language_id": 71
            },
            "skeleton_define_class": "\n\nclass Solution:\n    def maximumProduct(self, n, nums, k):",
            "skeleton_class_end": "",
            "skeleton_solution_class": ""
        },
        {
            "id": 3127,
            "code_problem_id": 939,
            "language": {
                "id": 26,
                "name": "JavaScript (Node.js 12.14.0)",
                "judge0_language_id": 63
            },
            "skeleton_define_class": "\nclass Solution {\n    maximumProduct(n, nums, k) {",
            "skeleton_class_end": "}\n}",
            "skeleton_solution_class": ""
        }
    ]
}