{
    "id": 228,
    "description": "Given an integer array `nums`, return _the maximum result of_ `nums[i] XOR nums[j]`, where `0 <= i <= j < n`.</br>\n`Or`\n</br>\nYou are tasked with finding the maximum XOR (exclusive OR) value that can be achieved by XORing any two elements in a given integer array `nums`. The XOR operation is defined as a bitwise operation where `0 XOR 0 = 0`, `1 XOR 0 = 1`, `0 XOR 1 = 1`, and `1 XOR 1 = 0`.\n\n**Input Format:**\n\n- `The first line of input contains an integer `n`, representing the number of elements in the array.`\n- `The second line contains `n` space-separated integers, the elements of the array `nums`.`\n\n**Output Format:**\n\n- `Output a single integer, the maximum XOR value that can be obtained by XORing any two elements in the array.`\n\n**Sample Input 1:**\n\n```\n6\n3 10 5 25 2 8\n```\n\n**Sample Output 1:**\n\n```\n28\n```\n\n**Explanation:**\n\n- `The maximum result is obtained by XORing 5 and 25, which equals 28 (`5 XOR 25 = 28`).`\n\n**Sample Input 2:**\n\n```\n12\n14 70 53 83 49 91 36 80 92 51 66 70\n```\n\n**Sample Output 2:**\n\n```\n127\n```\n\n\n**Explanation:**\n\n- `The maximum result is obtained by XORing any appropriate pair of numbers from the given array that yields the result of 127.`</br>\n#### Constraints:\n\n- `1 <= nums.length <= 10000`\n- `0 <= nums[i] <= 100000000`\n\n",
    "title": "Maximum xor pair",
    "default_testcase": {
        "id": 1622,
        "input": "6\n3 10 5 25 2 8",
        "expected_output": "28",
        "code_problem_id": 228,
        "created_at": "2022-11-01T12:12:15.608Z",
        "updated_at": "2022-11-01T12:12:15.608Z"
    },
    "problem_type": "level_test",
    "code_skeletons": [
        {
            "id": 327,
            "code_problem_id": 228,
            "language": {
                "id": 11,
                "name": "C++ (GCC 9.2.0)",
                "judge0_language_id": 54
            },
            "skeleton_define_class": "class Solution {\npublic:\n    int findMaximumXOR(vector<int>& nums) {\n      // write your code here",
            "skeleton_class_end": "   }\n};",
            "skeleton_solution_class": ""
        },
        {
            "id": 538,
            "code_problem_id": 228,
            "language": {
                "id": 25,
                "name": "Java (OpenJDK 13.0.1)",
                "judge0_language_id": 62
            },
            "skeleton_define_class": "class Solution {\n    public int findMaximumXOR(int[] nums) {\n        // Write Code Here",
            "skeleton_class_end": "  }\n}",
            "skeleton_solution_class": ""
        },
        {
            "id": 574,
            "code_problem_id": 228,
            "language": {
                "id": 26,
                "name": "JavaScript (Node.js 12.14.0)",
                "judge0_language_id": 63
            },
            "skeleton_define_class": "class Solution {\n    constructor() {\n        this.root = { bits: [null, null] };\n    }\n    findMaximumXOR(nums) {\n      //Write your code here;",
            "skeleton_class_end": "  }\n}",
            "skeleton_solution_class": ""
        },
        {
            "id": 575,
            "code_problem_id": 228,
            "language": {
                "id": 39,
                "name": "Python (3.8.1)",
                "judge0_language_id": 71
            },
            "skeleton_define_class": "class Solution:\n    def findMaximumXOR(self, nums):\n        # Write Code Here",
            "skeleton_class_end": null,
            "skeleton_solution_class": ""
        }
    ]
}