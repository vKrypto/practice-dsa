{
    "id": 481,
    "description": "Given a binary Tree, find the sum of all nodes on the longest path from root to leaf node. If there are multiple longest path return the sum of the one which is maximum.\n\n**`For Example`:**\n`Given the Binary Tree`\n\n           1\n         /   \\\n       2       3\n      /    \n     6\n\n```\nThe output should be 9 since the longest path from root to leaf node is \"1->2->6\" and its sum is 9.```\n\nLet us consider another example:\nGiven the Binary Tree\n```\n\n           1\n         /   \\\n       2       3\n\n`The output in this case would be '4' since even though both the paths are of equal length, the path \"1->3\" yields the highest output.`\n\n**`Input Format`:**\n\n`A single line that represents the value of the nodes and the value of '- 1' denotes NULL node.`\n\n**`Output Format:`**\n\n`Return a single integer representing the sum of all nodes along the longest path from root to leaf node.`\n\n**`Sample Input:`**\n\n```1 4 5 6260 788 9 -1 -1 -1 -1 -1 3 -1 -1 -1```\n\n**`Sample Output:`**\n\n```18```\n\n**`Constraints:`**\n\n```0 <= N <= 10^4```\n\n```0 <= data <= 10^3 ```\n\n`Where` '**```N```**' ```denotes the total number of nodes and 'data' denotes the value of the node.```",
    "title": "Sum of the longest path",
    "default_testcase": {
        "id": 3238,
        "input": "1 2 3 -1 -1 -1 -1",
        "expected_output": "4\n",
        "code_problem_id": 481,
        "created_at": "2023-12-28T21:28:57.741Z",
        "updated_at": "2023-12-28T21:28:57.741Z"
    },
    "problem_type": "session_assignment",
    "code_skeletons": [
        {
            "id": 1391,
            "code_problem_id": 481,
            "language": {
                "id": 25,
                "name": "Java (OpenJDK 13.0.1)",
                "judge0_language_id": 62
            },
            "skeleton_define_class": "/*class Node {\n    public int data;\n    public Node left;\n    public Node right;\n\n    public Node(int data) {\n        this.data = data;\n        this.left = null;\n        this.right = null;\n    }\n}\n*/\nclass Solution {\n  public int sumOfLongRootToLeafPathUtil(Node root) {",
            "skeleton_class_end": "  }\n}",
            "skeleton_solution_class": ""
        },
        {
            "id": 1392,
            "code_problem_id": 481,
            "language": {
                "id": 39,
                "name": "Python (3.8.1)",
                "judge0_language_id": 71
            },
            "skeleton_define_class": "class Solution:\n    def sum_of_long_root_to_leaf_path_util(self, root):\n      #write your code here",
            "skeleton_class_end": null,
            "skeleton_solution_class": ""
        },
        {
            "id": 1393,
            "code_problem_id": 481,
            "language": {
                "id": 26,
                "name": "JavaScript (Node.js 12.14.0)",
                "judge0_language_id": 63
            },
            "skeleton_define_class": "class Solution {",
            "skeleton_class_end": "}",
            "skeleton_solution_class": ""
        },
        {
            "id": 1394,
            "code_problem_id": 481,
            "language": {
                "id": 11,
                "name": "C++ (GCC 9.2.0)",
                "judge0_language_id": 54
            },
            "skeleton_define_class": "class Solution{\n    public:\n    int sumOfLongRootToLeafPathUtil(Node* root){\n",
            "skeleton_class_end": "  }\n\n};",
            "skeleton_solution_class": ""
        }
    ]
}