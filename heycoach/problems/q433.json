{
    "id": 433,
    "description": "You're given a graph initially forming a tree with n nodes (labelled 1 to n) and one extra edge added. Find and return the edge to remove, making it a valid tree again. If multiple options, return the last one in the input array edges.\n\n\n**Example: 1**</br>\n**Input**:\n\n```\nEdges: [[1,2],[1,3],[2,3]]\n```\n\n**Output**:</br>\n\n```\nRedundant Connection: [2,3]\nExplanation: Removing the edge [2,3] will make the graph a valid tree.\n```\n\n**Example : 2**</br>\n\n**Input**</br>\n\n```\nEdges: [[1,2],[2,3],[3,4],[1,4],[1,5]]\n```\n\n**Output**:</br>\n\n```\nRedundant Connection: [1,4]\nExplanation: Removing the edge [1,4] will make the graph a valid tree.\n```\n\n**Constraints**:\n\n`1 <= Number of edges <= 1,000`",
    "title": "Identifying Redundant Connection",
    "default_testcase": {
        "id": 3013,
        "input": "3\n1 2 \n1 3\n2 3",
        "expected_output": "[2, 3]\n",
        "code_problem_id": 433,
        "created_at": "2023-12-18T03:48:03.252Z",
        "updated_at": "2023-12-18T03:48:03.252Z"
    },
    "problem_type": "session_assignment",
    "code_skeletons": [
        {
            "id": 1219,
            "code_problem_id": 433,
            "language": {
                "id": 11,
                "name": "C++ (GCC 9.2.0)",
                "judge0_language_id": 54
            },
            "skeleton_define_class": "class Solution {\npublic:\n    vector<int> findRedundantConnection(vector<vector<int>>& edges) {",
            "skeleton_class_end": "}\n};",
            "skeleton_solution_class": ""
        },
        {
            "id": 1220,
            "code_problem_id": 433,
            "language": {
                "id": 25,
                "name": "Java (OpenJDK 13.0.1)",
                "judge0_language_id": 62
            },
            "skeleton_define_class": "class Solution {\n   public int[] findRedundantConnection(int[][] edges) {",
            "skeleton_class_end": "}\n}",
            "skeleton_solution_class": ""
        },
        {
            "id": 1221,
            "code_problem_id": 433,
            "language": {
                "id": 39,
                "name": "Python (3.8.1)",
                "judge0_language_id": 71
            },
            "skeleton_define_class": "class Solution:\n      def findRedundantConnection(self, edges):",
            "skeleton_class_end": "",
            "skeleton_solution_class": ""
        },
        {
            "id": 1222,
            "code_problem_id": 433,
            "language": {
                "id": 26,
                "name": "JavaScript (Node.js 12.14.0)",
                "judge0_language_id": 63
            },
            "skeleton_define_class": "class Solution {\n   findRedundantConnection(edges) {",
            "skeleton_class_end": "}\n}",
            "skeleton_solution_class": ""
        }
    ]
}