{
    "id": 569,
    "description": "You are given a 0-indexed integer array nums and a positive integer k. Perform the following operation on the array any number of times:\n\nChoose any element of the array and flip a bit in its binary representation. Flipping a bit means changing a 0 to 1 or vice versa.\nReturn the minimum number of operations required to make the bitwise XOR of all elements of the final array equal to k.\n\n\n### **` Input Format:`**\n\n`An integer n represents the number of elements in the array (1 <= n <= 10^5).`<br>\n`An array of integers nums of length n (0 <= nums[i] <= 10^6).`<br>\n`A positive integer k (0 <= k <= 10^6).`<br>\n\n### Output Format:\n\n`An integer representing the minimum number of operations required.`\n\n### `Example`\n\n#### `Input:` \n ` nums = [2,1,3,4],  k = 1`\n#### Output: \n  2\n#### Explanation: \n  `We can perform the following operations:`\n  - \n\n```\n1. Choose element 2 (3 in binary is 011), flip the first bit, resulting in (010)2 == 2. \nnums becomes [2,1,2,4].\n\n\n2. Choose element 0 (2 in binary is 010), flip the third bit, resulting in (110)2 == 6. \nnums becomes [6,1,2,4]. The XOR of elements of the final array is (6 XOR 1 XOR 2 XOR 4) == 1 == k.\n It can be shown that we cannot make the XOR equal to k in less than 2 operations.\n\n```\n\n",
    "title": "Xor Magic",
    "default_testcase": {
        "id": 3870,
        "input": "41 55\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41\n",
        "expected_output": "4\n",
        "code_problem_id": 569,
        "created_at": "2024-01-22T03:07:12.879Z",
        "updated_at": "2024-01-22T03:07:12.879Z"
    },
    "problem_type": "practice",
    "code_skeletons": [
        {
            "id": 1753,
            "code_problem_id": 569,
            "language": {
                "id": 11,
                "name": "C++ (GCC 9.2.0)",
                "judge0_language_id": 54
            },
            "skeleton_define_class": "\nclass Solution {\npublic:\n    int minOperations(vector<int>& nums, int k) {\n        \n\n",
            "skeleton_class_end": "    }\n};\n ",
            "skeleton_solution_class": ""
        },
        {
            "id": 1754,
            "code_problem_id": 569,
            "language": {
                "id": 25,
                "name": "Java (OpenJDK 13.0.1)",
                "judge0_language_id": 62
            },
            "skeleton_define_class": "class Solution {\n    public int minOperations(ArrayList<Integer> nums, int k) {",
            "skeleton_class_end": "   }\n}",
            "skeleton_solution_class": ""
        },
        {
            "id": 1755,
            "code_problem_id": 569,
            "language": {
                "id": 39,
                "name": "Python (3.8.1)",
                "judge0_language_id": 71
            },
            "skeleton_define_class": "class Solution:\n    def minOperations(self, nums, k):\n        ",
            "skeleton_class_end": "",
            "skeleton_solution_class": ""
        },
        {
            "id": 1756,
            "code_problem_id": 569,
            "language": {
                "id": 26,
                "name": "JavaScript (Node.js 12.14.0)",
                "judge0_language_id": 63
            },
            "skeleton_define_class": "\nclass Solution {\n    minOperations(nums, k) {\n\n",
            "skeleton_class_end": "        \n    }\n}",
            "skeleton_solution_class": ""
        }
    ]
}