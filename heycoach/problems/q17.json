{
    "id": 17,
    "description": "An integer array original is transformed into a `doubled` array changed by appending `twice the value` of every element in original, and then randomly `shuffling` the resulting array.\n\nGiven an array changed, return original if changed is a `doubled` array. If changed is not a `doubled` array, return an empty array. The elements in original may be returned in `any` order.\n\n### Example 1 \n\n### Input\n```CPP\nchanged = [1,3,4,2,6,8]\n``` \n### Output \n```CPP \n[1,3,4]\n``` \n#### Explanation:\nOne possible original array could be [1,3,4]:\n- Twice the value of 1 is 1 * 2 = 2.\n- Twice the value of 3 is 3 * 2 = 6.\n- Twice the value of 4 is 4 * 2 = 8.\nOther original arrays could be [4,3,1] or [3,1,4].\n\n### Example 2 \n\n### Input\n```CPP\n changed = [6,3,0,1]\n``` \n### Output \n```CPP \n[]\n``` \n#### Explanation:\nchanged is not a doubled array.\n\n### Constraints:\n\n* 1 <= changed. length <= 10^5\n* 0 <= changed[i] <= 10^5\n\n",
    "title": "Find the Array",
    "default_testcase": null,
    "problem_type": "practice",
    "code_skeletons": [
        {
            "id": 265,
            "code_problem_id": 17,
            "language": {
                "id": 11,
                "name": "C++ (GCC 9.2.0)",
                "judge0_language_id": 54
            },
            "skeleton_define_class": null,
            "skeleton_class_end": null,
            "skeleton_solution_class": "\nclass Solution {\npublic:\n  void solve(vector<int> &arr) {\n    \n  } \n};\n"
        },
        {
            "id": 270,
            "code_problem_id": 17,
            "language": {
                "id": 25,
                "name": "Java (OpenJDK 13.0.1)",
                "judge0_language_id": 62
            },
            "skeleton_define_class": null,
            "skeleton_class_end": null,
            "skeleton_solution_class": "\nclass Solution {\n  public void solve(Vector<Integer> arr) {\n    \n  } \n}\n"
        },
        {
            "id": 285,
            "code_problem_id": 17,
            "language": {
                "id": 39,
                "name": "Python (3.8.1)",
                "judge0_language_id": 71
            },
            "skeleton_define_class": null,
            "skeleton_class_end": null,
            "skeleton_solution_class": "class Solution:\n    def solve(self, arr):\n        pass\n"
        }
    ]
}