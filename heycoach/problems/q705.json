{
    "id": 705,
    "description": "\nYou have been given a **N*M** matrix filled with integer numbers, find the **maximum** sum that can be obtained from a path starting from **any cell** in the first row to any cell in the last row. From a cell in a row, you can move to another cell `directly below` that row, or `diagonally below left` or  `diagonally below right`. So from a particular cell (i,j) we can move in three directions:\n\n* Down : (i+1,j)\n* Down-Left : (i+1,j-1)\n* Down-Right : (i+1,j+1)\n\n### Example 1 \n\n### Input\n```CPP \nN = 4, M = 4\n1 2 10 4\n100 3 2 1\n1 1 20 2\n1 2 2 1\n``` \n### Output \n```CPP \n105\n``` \n#### Explanation:\n\nThe maximum path sum will be 2->100->1->2, So the sum is 105(2+100+1+2).\n\n### Example 2 \n\n### Input\n```CPP\nN = 4,M = 6\n10 10 2 -13 20 4\n1 -9 -81 30 2 5\n0 10 4 -79 2 -10\n1 -5 2 20 -11 4\n```\n### Output \n```CPP \n74\n``` \n#### Explanation:\nthe maximum path sum will be 20->30->4->20, So the sum is 74(20+30+4+20).\n\n### Constraints:\n\n* 1 <= N,M<= 100\n* -10000 <= matrix[i][j] <= 10000\n\n",
    "title": "Maximum falling path sum",
    "default_testcase": {
        "id": 4627,
        "input": "4 6\n10 10 2 -13 20 4\n1 -9 -81 30 2 5\n0 10 4 -79 2 -10\n1 -5 2 20 -11 4",
        "expected_output": "74\n",
        "code_problem_id": 705,
        "created_at": "2024-01-28T06:55:37.636Z",
        "updated_at": "2024-01-28T06:55:37.636Z"
    },
    "problem_type": "practice",
    "code_skeletons": [
        {
            "id": 2217,
            "code_problem_id": 705,
            "language": {
                "id": 11,
                "name": "C++ (GCC 9.2.0)",
                "judge0_language_id": 54
            },
            "skeleton_define_class": "\nclass Solution {\npublic:\n int getMaxPathSum(vector<vector<int>> &matrix)\n    {",
            "skeleton_class_end": "}\n};",
            "skeleton_solution_class": ""
        },
        {
            "id": 2218,
            "code_problem_id": 705,
            "language": {
                "id": 25,
                "name": "Java (OpenJDK 13.0.1)",
                "judge0_language_id": 62
            },
            "skeleton_define_class": "\nclass Solution {\n    public int getMaxPathSum(int[][] matrix) {",
            "skeleton_class_end": "}\n}",
            "skeleton_solution_class": ""
        },
        {
            "id": 2219,
            "code_problem_id": 705,
            "language": {
                "id": 39,
                "name": "Python (3.8.1)",
                "judge0_language_id": 71
            },
            "skeleton_define_class": "class Solution:\n    def getMaxPathSum(self, matrix):",
            "skeleton_class_end": "",
            "skeleton_solution_class": ""
        },
        {
            "id": 2220,
            "code_problem_id": 705,
            "language": {
                "id": 26,
                "name": "JavaScript (Node.js 12.14.0)",
                "judge0_language_id": 63
            },
            "skeleton_define_class": "class Solution {\n    getMaxPathSum(matrix) {",
            "skeleton_class_end": "}\n}",
            "skeleton_solution_class": ""
        }
    ]
}