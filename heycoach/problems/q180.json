{
    "id": 180,
    "description": "You are given an  `m x n`  `grid`  where each cell can have one of three values:\n\n-   `0`  representing an empty cell,\n-   `1`  representing a fresh lemon, or\n-   `2`  representing a rotten lemon.\n\nEvery minute, any fresh lemon that is  **4-directionally adjacent**  to a rotten lemon becomes rotten.\n\nReturn  _the minimum number of minutes that must elapse until no cell has a fresh lemon. If  _this is impossible, return_  `-1`.\n\n### Example 1 \n\n### Input\n```CPP\ngrid = [[2,1,1],\n        [1,1,0],\n        [0,1,1]]\n```\n\n\n### Output \n```CPP\n4\n```\n### Explanation\n\n* at t = 1,grid[0][0] lemon will infect grid[0][1] and grid[1][0]\n* at t=2, grid[1][0] lemon will infect grid[1][1] and grid[0][1] will infect grid[0][2] lemon\n* at t =3, grid[1][1] lemon will infect grid[2][1] lemon\n* at t = 4,grid[2][1] lemon will infect grid[2][2] lemon.\n\nSo at t = 4 there are no fresh lemons present in the grid, so 4 will be the output.\n\n**Example 2:**\n\n**Input:**\n```CPP\ngrid = [[0,2]]\n```\n**Output:** \n```CPP\n0\n```\n### Explanation\nSince there are already no fresh lemons at minute 0, the answer is just 0.\n\n\n### Constraints:\n* `1 <= m,n <= 200`\n*  `0 <= grid[i][j] <= 2`\n",
    "title": "Rotten lemons",
    "default_testcase": {
        "id": 1290,
        "input": "3 3\n2 1 1\n1 1 0\n0 1 1",
        "expected_output": "4\n",
        "code_problem_id": 180,
        "created_at": "2022-10-26T10:24:01.646Z",
        "updated_at": "2022-10-26T10:24:01.646Z"
    },
    "problem_type": "level_test",
    "code_skeletons": [
        {
            "id": 249,
            "code_problem_id": 180,
            "language": {
                "id": 11,
                "name": "C++ (GCC 9.2.0)",
                "judge0_language_id": 54
            },
            "skeleton_define_class": "class Solution {\npublic:\n  int lemonsRotting(vector<vector<int>>& grid) {\n    //Write your code here;",
            "skeleton_class_end": "}\n};",
            "skeleton_solution_class": ""
        },
        {
            "id": 537,
            "code_problem_id": 180,
            "language": {
                "id": 25,
                "name": "Java (OpenJDK 13.0.1)",
                "judge0_language_id": 62
            },
            "skeleton_define_class": "class Solution {\n    public int lemonsRotting(int[][] grid) {\n        // Write Code Here\n ",
            "skeleton_class_end": "}\n}",
            "skeleton_solution_class": ""
        },
        {
            "id": 623,
            "code_problem_id": 180,
            "language": {
                "id": 39,
                "name": "Python (3.8.1)",
                "judge0_language_id": 71
            },
            "skeleton_define_class": "class Solution:  \n    def lemonsRotting(self, grid):\n      #Write your code here;",
            "skeleton_class_end": null,
            "skeleton_solution_class": ""
        },
        {
            "id": 625,
            "code_problem_id": 180,
            "language": {
                "id": 26,
                "name": "JavaScript (Node.js 12.14.0)",
                "judge0_language_id": 63
            },
            "skeleton_define_class": "class Solution {\n    lemonsRotting(grid) {\n      //Write your code here;",
            "skeleton_class_end": "}\n}",
            "skeleton_solution_class": ""
        }
    ]
}