{
    "id": 148,
    "description": "You are tasked with determining the minimum number of sprinklers required to water every plant in a linear garden. The garden is represented as an array `arr` of `N` integers, where the `i`-th integer represents the range `[i - arr[i], i + arr[i]]` within which sprinkler `i` can water.</br> \nYour goal is to find the minimum number of sprinklers that need to be activated to ensure every part of the garden, from the first to the last plant, is watered. If it is not possible to water the entire garden, you should output `-1`.\n\n**Input Format:**\n\n- `The first line contains an integer `N`, the number of sprinklers.`\n- `The next `N` lines each contain a single integer, where the `i`-th integer represents the range `[i - arr[i], i + arr[i]]` of the `i`-th sprinkler.`\n\n**Output Format:**\n\n- `A single integer, representing the minimum number of sprinklers needed to water the entire garden, or `-1` if it's not possible.`\n\n**`Examples:`**\n\n#### `Example 1:`\n\n#### `Input:`\n\n```\n3\n1 2 1\n```\n\n#### `Output:`\n`1`\n\n#### `Explanation:`   \n`The second sprinkler covers the entire garden, so only 1 sprinkler is needed.`\n\n`Example 2:`\n\n#### `Input:`  \n\n```\n5  \n2 1 1 2 1\n```\n\n####  `Output:`\n`2`\n\n#### `Explanation:`\n`Sprinklers at positions 1 and 4 (0-indexed) together cover the entire garden, so 2 sprinklers are needed.`\n\n**` Constraints:`**\n\n- `1 <= N <= 2 * 10^5`\n- `1 <= arr[i] <= 10^9`\n",
    "title": "Sprinkler",
    "default_testcase": {
        "id": 1082,
        "input": "26\n2 1 4 6 3 0 1 7 5 1 0 0 0 0 0 0 2 1 6 3 0 4 5 1 0 0",
        "expected_output": "3",
        "code_problem_id": 148,
        "created_at": "2022-10-20T15:37:08.836Z",
        "updated_at": "2022-10-20T15:37:08.836Z"
    },
    "problem_type": "level_test",
    "code_skeletons": [
        {
            "id": 258,
            "code_problem_id": 148,
            "language": {
                "id": 11,
                "name": "C++ (GCC 9.2.0)",
                "judge0_language_id": 54
            },
            "skeleton_define_class": "class Solution {\n  public:\n    int minSprinkler(vector < int > & arr) {\n      //Write your code here;",
            "skeleton_class_end": "}\n};",
            "skeleton_solution_class": "\n"
        },
        {
            "id": 277,
            "code_problem_id": 148,
            "language": {
                "id": 25,
                "name": "Java (OpenJDK 13.0.1)",
                "judge0_language_id": 62
            },
            "skeleton_define_class": "class Solution {\n    public int minSprinkler(int[] arr) {\n      //Writeyour code here;",
            "skeleton_class_end": "}\n}",
            "skeleton_solution_class": "\n\n"
        },
        {
            "id": 278,
            "code_problem_id": 148,
            "language": {
                "id": 39,
                "name": "Python (3.8.1)",
                "judge0_language_id": 71
            },
            "skeleton_define_class": "class Solution:\n    def minSprinkler(self, arr):\n      #Write your code here;",
            "skeleton_class_end": null,
            "skeleton_solution_class": ""
        },
        {
            "id": 640,
            "code_problem_id": 148,
            "language": {
                "id": 26,
                "name": "JavaScript (Node.js 12.14.0)",
                "judge0_language_id": 63
            },
            "skeleton_define_class": "class Solution {\n    minSprinkler(arr) {\n      //Write your code here;",
            "skeleton_class_end": "}\n}",
            "skeleton_solution_class": ""
        }
    ]
}