{
    "id": 43,
    "description": "You are given an m x n integer array grid where grid[i][j] could be:\n\n* 1 representing the starting square. There is exactly one starting square.\n* 2 representing the ending square. There is exactly one ending square.\n* 0 representing empty squares we can walk over.\n\n* -1 representing obstacles that we cannot walk over.\n\nReturn the number of 4-directional walks from the starting square to the ending square, that walk over every non-obstacle square exactly once.\n\n### Example 1 \n![Image](https://assets.leetcode.com/uploads/2021/08/02/lc-unique1.jpg)\n### Input\n```CPP\n grid = [[1,0,0,0],[0,0,0,0],[0,0,2,-1]]\n``` \n### Output \n```CPP \n2\n``` \n#### Explanation -\nWe have the following two paths: \n1. (0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2)\n2. (0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2)\n\n\n### Example 2 \n![Image](https://assets.leetcode.com/uploads/2021/08/02/lc-unique2.jpg)\n### Input\n```CPP\n grid = [[1,0,0,0],[0,0,0,0],[0,0,0,2]]\n``` \n### Output \n```CPP \n4\n``` \n#### Explanation -\n We have the following four paths: \n1. (0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2),(2,3)\n2. (0,0),(0,1),(1,1),(1,0),(2,0),(2,1),(2,2),(1,2),(0,2),(0,3),(1,3),(2,3)\n3. (0,0),(1,0),(2,0),(2,1),(2,2),(1,2),(1,1),(0,1),(0,2),(0,3),(1,3),(2,3)\n4. (0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2),(2,3)\n\n\n### Constraints:\n\n* m == grid.length\n* n == grid[i].length\n* 1 <= m, n <= 20\n* 1 <= m * n <= 20\n* -1 <= grid[i][j] <= 2\n* There is exactly one starting cell and one ending cell.",
    "title": "Unique Path",
    "default_testcase": {
        "id": 266,
        "input": "3 6\n1 0 0 0 0 0\n0 0 0 0 0 0\n0 0 0 0 2 -1",
        "expected_output": "8",
        "code_problem_id": 43,
        "created_at": "2022-09-26T16:43:37.006Z",
        "updated_at": "2022-09-26T16:43:37.006Z"
    },
    "problem_type": "level_test",
    "code_skeletons": [
        {
            "id": 369,
            "code_problem_id": 43,
            "language": {
                "id": 11,
                "name": "C++ (GCC 9.2.0)",
                "judge0_language_id": 54
            },
            "skeleton_define_class": "class Solution {\n  public:\n   int uniquePathsIII(vector < vector < int >> & grid) {\n     //Write your code here",
            "skeleton_class_end": "    }\n};",
            "skeleton_solution_class": ""
        },
        {
            "id": 371,
            "code_problem_id": 43,
            "language": {
                "id": 25,
                "name": "Java (OpenJDK 13.0.1)",
                "judge0_language_id": 62
            },
            "skeleton_define_class": "class Solution {\n    private int ans = 0;\n\n    public int uniquePathsIII(int[][] grid) {\n      //Write your code here",
            "skeleton_class_end": "    }\n}",
            "skeleton_solution_class": ""
        },
        {
            "id": 373,
            "code_problem_id": 43,
            "language": {
                "id": 39,
                "name": "Python (3.8.1)",
                "judge0_language_id": 71
            },
            "skeleton_define_class": "class Solution:\n    def __init__(self):\n        self.ans = 0\n\n    def uniquePathsIII(self, grid):",
            "skeleton_class_end": null,
            "skeleton_solution_class": ""
        },
        {
            "id": 645,
            "code_problem_id": 43,
            "language": {
                "id": 26,
                "name": "JavaScript (Node.js 12.14.0)",
                "judge0_language_id": 63
            },
            "skeleton_define_class": "class Solution {\n    constructor() {\n        this.ans = 0;\n    }\n\n    uniquePathsIII(grid) {\n      //Write your code here",
            "skeleton_class_end": "      }\n}",
            "skeleton_solution_class": ""
        }
    ]
}