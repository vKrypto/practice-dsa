{
    "id": 869,
    "description": "Given an array `p` of distinct integers, you can perform several operations to transform this array. In each operation, you select a contiguous subsegment of `p` and remove all elements except for the smallest element in that subsegment. The task is to determine the number of different arrays (termed \"reachable arrays\") that can be obtained by performing any number of these operations on the array `p`.\n\n**Input:**\n\n- The first line contains an integer `t` (1 \u2264 t \u2264 10^4), representing the number of test cases.\n- Each test case starts with an integer `n` (1 \u2264 n \u2264 3 \u00d7 10^5), the number of elements in the array `p`.\n- The following line contains `n` distinct integers `p1, p2, ..., pn` (1 \u2264 pi \u2264 10^9), which are the elements of the array `p`.\n\n**Output:**\n\n- For each test case, output a single integer \u2014 the number of reachable arrays from `p`, taken modulo 998244353.\n\n**Constraints:**\n\n- The sum of `n` across all test cases does not exceed 3 \u00d7 10^5.\n\n**Examples:**\n\nInput:\n```\n3\n2\n2 1\n4\n2 4 1 3\n5\n10 2 6 3 4\n```\nOutput:\n```\n2\n6\n12\n```\n\n**Explanation:**\n\nFor the example:\n1. For the array [2, 1], the reachable arrays are [2, 1] and [1] (i.e., either keep both elements as they are, or reduce the subarray to its minimum element).\n2. For the array [2, 4, 1, 3], some of the reachable arrays include [2, 4, 1, 3], [2, 1, 3], [1, 3], [2, 1], [1], etc., leading to 6 possible configurations.\n3. For the array [10, 2, 6, 3, 4], multiple operations on different subsegments can lead to various configurations, resulting in 12 possible arrays.\n\n**Task:**\n\nThe task is to implement an algorithm that computes, for each input array, the number of reachable arrays through described operations, ensuring the result for each test case is presented modulo 998244353.",
    "title": "Reachable Subarray Reduction",
    "default_testcase": null,
    "problem_type": "practice",
    "code_skeletons": []
}