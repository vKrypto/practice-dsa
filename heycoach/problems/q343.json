{
    "id": 343,
    "description": "\nGiven an undirected tree comprising `n` nodes connected by a series of edges, the task is to determine which node(s), when used as the root, produce the minimum possible height for the tree.\n\n**`Input Format:`**\n\n- ` An integer `n` that denotes the total number of nodes in the tree. Each node is uniquely numbered from `0` to `n-1`.`\n- `A list of `m` pairs of integers `[u, v]`, each representing an undirected edge that connects nodes `u` and `v`, thus forming the tree.`\n\n**`Output Format:`**\n\n- `A list containing the number(s) of the node(s) that, if chosen as the root, will minimize the tree's height. If multiple nodes meet this criterion, return a list of these nodes.`\n\n**`Definitions:`**\n\n- **`Tree Height:`** `The maximum length of a path from the root node down to the farthest leaf node.`\n- **`Leaf Node:`** `A node that is connected to exactly one other node, making it an endpoint in the tree.`\n\n**Example**:\n\n\n#### `Input:` \n\n```\nn = 6\nedges = [[0, 3], [1, 3], [2, 3], [3, 4], [4, 5]]\n```\n\n#### `Output:`\n`[3, 4]`\n\n#### `Explanation:` \n```\nBy choosing either node 3 or node 4 as the tree's root, the resultant tree height is minimized to 2. Selecting any other node as the root results in a taller tree.\n```\n\n**`Constraints:`**\n\n- `1\u2264n\u2264100`\n- `0\u2264number of edges=m\u2264200, with m=n\u22121 ensuring the structure is a tree.`\n- `The edges list contains no duplicates or self-loops, ensuring a valid, undirected tree representation.`   \n\n**`Hints`**:\n```\nThe solution employs a gradual trimming approach, where leaf nodes (nodes with a single connection) are iteratively pruned from the periphery towards the center. This process is repeated until only one or two nodes remain, indicating the potential root nodes for a tree of minimum height.\n```",
    "title": "Minimum Height Tree",
    "default_testcase": {
        "id": 2182,
        "input": "6 5\n0 3\n1 3\n2 3\n3 4\n4 5",
        "expected_output": "3 4 \n",
        "code_problem_id": 343,
        "created_at": "2023-09-21T14:16:07.578Z",
        "updated_at": "2023-09-21T14:16:07.578Z"
    },
    "problem_type": "session_assignment",
    "code_skeletons": [
        {
            "id": 802,
            "code_problem_id": 343,
            "language": {
                "id": 11,
                "name": "C++ (GCC 9.2.0)",
                "judge0_language_id": 54
            },
            "skeleton_define_class": "class Solution {\npublic:\n    vector<int> findMinHeightTrees(int n, vector<vector<int>>& edges) {\n      //Write your code here",
            "skeleton_class_end": "  }\n};",
            "skeleton_solution_class": ""
        },
        {
            "id": 985,
            "code_problem_id": 343,
            "language": {
                "id": 25,
                "name": "Java (OpenJDK 13.0.1)",
                "judge0_language_id": 62
            },
            "skeleton_define_class": "class Solution {\n  public List<Integer> findMinHeightTrees(int n, int[][] edges) {\n    //Write your code here",
            "skeleton_class_end": "    }\n}",
            "skeleton_solution_class": ""
        },
        {
            "id": 986,
            "code_problem_id": 343,
            "language": {
                "id": 39,
                "name": "Python (3.8.1)",
                "judge0_language_id": 71
            },
            "skeleton_define_class": "class Solution:\n      def findMinHeightTrees(self, n, edges):",
            "skeleton_class_end": "",
            "skeleton_solution_class": ""
        },
        {
            "id": 1017,
            "code_problem_id": 343,
            "language": {
                "id": 26,
                "name": "JavaScript (Node.js 12.14.0)",
                "judge0_language_id": 63
            },
            "skeleton_define_class": "class Solution {\n      findMinHeightTrees(n, edges) {",
            "skeleton_class_end": "}\n}",
            "skeleton_solution_class": ""
        }
    ]
}