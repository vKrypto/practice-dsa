{
    "id": 86,
    "description": "Given a Directed Graph with **n** vertices (Numbered from **0** to **n-1**) and **m** edges, check whether it contains any cycle or not.\n\n### Example 1 \n\n### Input\n[![cycle-in-udg-tc1.png](https://i.postimg.cc/6qY4jpQ4/cycle-in-udg-tc1.png)](https://postimg.cc/644QTwnB)\n### Output \n```CPP \n0\n``` \n#### Explanation:\nThere is no cycle present in the given graph.\n### Example 2 \n\n### Input\n[![cycle-in-udg-tc2.png](https://i.postimg.cc/1XgvP2Nt/cycle-in-udg-tc2.png)](https://postimg.cc/y3Hmyfj4)\n### Output \n```CPP \n1\n``` \n#### Explanation:\nThere is a cycle present in the graph i.e. 0->1->2->4->0\n### Constraints:\n\n* 1 <= n,m <= 1000",
    "title": "Detect cycle in a directed graph",
    "default_testcase": {
        "id": 620,
        "input": "5 6\n0 1\n1 2\n2 3\n3 4\n0 4\n1 3\n",
        "expected_output": "0\n",
        "code_problem_id": 86,
        "created_at": "2022-10-03T09:58:53.088Z",
        "updated_at": "2022-10-03T09:58:53.088Z"
    },
    "problem_type": "practice",
    "code_skeletons": [
        {
            "id": 124,
            "code_problem_id": 86,
            "language": {
                "id": 11,
                "name": "C++ (GCC 9.2.0)",
                "judge0_language_id": 54
            },
            "skeleton_define_class": null,
            "skeleton_class_end": null,
            "skeleton_solution_class": "class Solution {\npublic:\n\n    bool isCyclic(int V, vector<int> adj[]) {\n      // write your code here\n    }\n};"
        },
        {
            "id": 493,
            "code_problem_id": 86,
            "language": {
                "id": 25,
                "name": "Java (OpenJDK 13.0.1)",
                "judge0_language_id": 62
            },
            "skeleton_define_class": null,
            "skeleton_class_end": null,
            "skeleton_solution_class": "class Solution {\n    public boolean isCyclic(int V, ArrayList<Integer>[] adj) {\n        // write your code here\n    }\n}\n"
        }
    ]
}