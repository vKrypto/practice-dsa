{
    "id": 381,
    "description": "In this challenge, you're tasked with determining whether a given number is a \"Lucky Number.\" A Lucky Number is defined by the following process:\n\n1. Start with any positive integer.\n2. Replace the number with the sum of the cubes of its digits.\n3. Repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle that does not include 1.\n4. If, at any stage of this process, the number reaches 1, it is deemed a Lucky Number. Your goal is to create a function that accepts an integer as input and returns true if it is a Lucky Number by reaching 1, and false otherwise.\n\n#### For example:\n\n`A number like 100 is a Lucky Number because the process (1^3 + 0^3 + 0^3 = 1) immediately reaches 1.\nA number like 4 is not a Lucky Number because it enters a cycle (4^3 = 64, 6^3 + 4^3 = 280, 2^3 + 8^3 + 0^3 = 520, ...) that does not include 1.\nThe challenge is to identify whether a given number will continue indefinitely in a cycle or eventually reach the number 1.`\n\n#### `Input:`\n`A single integer n.`\n\n#### `Output:`\n`Return true if n is a Lucky Number, and false if not.`\n\n#### `Example 1:`\n#### `Input:`\n`n = 100`\n\n#### `Output:`\n`true`\n\n#### `Example 2:`\n#### `Input:`\n`n = 4`\n\n#### `Output:`\n`false`\n\n#### `Constraints:`\n- 1 <= n <= 10^4\n\n`Your task is to implement the function isLuckyNumber(n) which will check for the Lucky Number property for the given input n.`",
    "title": "Lucky Number",
    "default_testcase": {
        "id": 5993,
        "input": "100",
        "expected_output": "true\n",
        "code_problem_id": 381,
        "created_at": "2024-03-03T14:17:31.654Z",
        "updated_at": "2024-03-03T14:17:31.654Z"
    },
    "problem_type": "session_assignment",
    "code_skeletons": [
        {
            "id": 1119,
            "code_problem_id": 381,
            "language": {
                "id": 11,
                "name": "C++ (GCC 9.2.0)",
                "judge0_language_id": 54
            },
            "skeleton_define_class": "class Solution {\npublic:\n    bool isLuckyNumber(int n) {\n      //Write your code here;",
            "skeleton_class_end": "  }\n};",
            "skeleton_solution_class": ""
        },
        {
            "id": 1120,
            "code_problem_id": 381,
            "language": {
                "id": 25,
                "name": "Java (OpenJDK 13.0.1)",
                "judge0_language_id": 62
            },
            "skeleton_define_class": "class Solution {\n    public boolean isLuckyNumber(int n) {\n      //Write your code here;",
            "skeleton_class_end": "   }\n}",
            "skeleton_solution_class": ""
        },
        {
            "id": 1121,
            "code_problem_id": 381,
            "language": {
                "id": 39,
                "name": "Python (3.8.1)",
                "judge0_language_id": 71
            },
            "skeleton_define_class": "class Solution:\n    def isLuckyNumber(self, n: int) -> bool:\n      #Write your code here",
            "skeleton_class_end": "",
            "skeleton_solution_class": ""
        },
        {
            "id": 1122,
            "code_problem_id": 381,
            "language": {
                "id": 26,
                "name": "JavaScript (Node.js 12.14.0)",
                "judge0_language_id": 63
            },
            "skeleton_define_class": "class Solution {\n    isLuckyNumber(n) {\n      //Write your code here",
            "skeleton_class_end": "  }\n}",
            "skeleton_solution_class": ""
        }
    ]
}