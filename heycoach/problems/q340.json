{
    "id": 340,
    "description": "\n\n\nGiven a directed graph with `V` vertices and `E` edges represented as an adjacency list, your task is to find all the \"safe\" nodes in the graph. A node is considered safe if every possible path starting from that node leads to a terminal node. A terminal node is one from which no outgoing edges are present, implying it doesn't lead to any other node.\n\n#### `Definitions:`\n- **`Directed Graph`**: `A graph where the edges have a direction, indicating the relationship flows from one vertex to another.`\n- **`Adjacency List`**: `A way of representing a graph where a list or an array is used to represent the immediate neighbors that each vertex can go to.`\n- **`Safe Node`**: `A node from which all possible paths lead to a terminal node.`\n- **`Terminal Node`**: `A node that has no outgoing edges.`\n\n#### `Input Format:`\n- `The first line contains two space-separated integers, `V` (the number of vertices) and `E` (the number of edges), representing the graph's vertices and edges, respectively.`\n- `The next `E` lines contain two integers each, `u` and `v`, representing a directed edge from vertex `u` to vertex `v`.`\n\n#### `Output Format:`\n- `Output a single line containing the safe nodes of the graph sorted in ascending order. Each node should be represented by its integer label.`\n\n#### `Constraints:\n- `1 <= V <= 10^4`\n- `1 <= E <= 4 * 10^4`\n- `0 <= u, v < V`\n- `The graph may contain self-loops and multiple edges.`\n- ` `adj[i]` is sorted in a strictly increasing order for any node `i`.`\n\n#### `Example:`\n\n**`Input`**:\n```\n7 7\n0 1\n0 2\n1 2\n1 3\n3 0\n4 5\n2 5\n```\n\n**`Output`**:\n```\n2 4 5 6\n```\n\n#### `Explanation:`\n- `In the given graph, nodes 5 and 6 are terminal nodes as there are no outgoing edges from them.`\n- `Starting from node 2, one can reach terminal node 5.`\n- `Nodes 4 and 6 are also terminal nodes, thus considered safe.`\n- `Therefore, the safe nodes in the graph are 2, 4, 5, and 6.`\n\n#### `Hints:`\n`The solution involves identifying cycles within the graph. A node is not safe if there is a cycle in any of its possible paths, as it implies there's a path that doesn't lead to a terminal node. Using Depth First Search (DFS) or similar graph traversal techniques, one can track visited nodes and their status in the current traversal path to detect cycles and determine the safety of each node.`",
    "title": "Find Eventual Safe States",
    "default_testcase": {
        "id": 2177,
        "input": "7 7 \n0 1\n0 2\n1 2\n1 3\n3 0\n4 5\n2 5",
        "expected_output": "2 4 5 6 \n",
        "code_problem_id": 340,
        "created_at": "2023-09-20T21:19:55.312Z",
        "updated_at": "2023-09-20T21:19:55.312Z"
    },
    "problem_type": "session_assignment",
    "code_skeletons": [
        {
            "id": 799,
            "code_problem_id": 340,
            "language": {
                "id": 11,
                "name": "C++ (GCC 9.2.0)",
                "judge0_language_id": 54
            },
            "skeleton_define_class": "class Solution {\n  public:\n        vector<int> eventualSafeNodes(int V, vector<int> adj[]) {\n          //Write your code here",
            "skeleton_class_end": "  }\n};",
            "skeleton_solution_class": ""
        },
        {
            "id": 1026,
            "code_problem_id": 340,
            "language": {
                "id": 25,
                "name": "Java (OpenJDK 13.0.1)",
                "judge0_language_id": 62
            },
            "skeleton_define_class": "class Solution {\n    public List<Integer> eventualSafeNodes(int V, List<List<Integer>> adj) {\n        //Write your code here",
            "skeleton_class_end": "  }\n}",
            "skeleton_solution_class": ""
        },
        {
            "id": 1027,
            "code_problem_id": 340,
            "language": {
                "id": 39,
                "name": "Python (3.8.1)",
                "judge0_language_id": 71
            },
            "skeleton_define_class": "class Solution:\n      def eventualSafeNodes(self, V: int, adj: List[List[int]]) -> List[int]:\n        #Write your code here",
            "skeleton_class_end": "",
            "skeleton_solution_class": ""
        },
        {
            "id": 1028,
            "code_problem_id": 340,
            "language": {
                "id": 26,
                "name": "JavaScript (Node.js 12.14.0)",
                "judge0_language_id": 63
            },
            "skeleton_define_class": "class Solution {\n      eventualSafeNodes(V, adj) {\n        //Write your code here",
            "skeleton_class_end": "  }\n}",
            "skeleton_solution_class": ""
        }
    ]
}