{
    "id": 268,
    "description": "Given a network of `n` servers connected by undirected server-to-server connections, identify all the critical connections in the network. A critical connection is defined as a connection that, if removed, would result in some servers being unable to reach other servers.\n\n**`Definitions:`**\n- `Servers are numbered from `0` to `n - 1`.`\n- `Connections are represented by pairs of integers `[ai, bi]`, indicating a bidirectional connection between servers `ai` and `bi`.`\n- `A server can reach another server if there is a path of connections from one to the other.`\n\n**`Input Format:`**\n- `The first line contains two space-separated integers `n` and `m`, where `n` is the number of servers and `m` is the number of connections.`\n- `The next `m` lines each contain two space-separated integers representing a connection between two servers`.\n\n**`Output Format:`**\n- `Print the critical connections in any order. Each critical connection should be printed as two space-separated integers per line.`\n- `If there are no critical connections, print `-1`.`\n\n\n**`Sample Input:`**\n```\n7 8\n6 1\n4 2\n2 5\n1 5\n0 1\n1 2\n2 0\n1 3\n```\n\n**`Sample Output:`**\n```\n1 6\n2 4\n1 3\n```\n**`Constraints:`**\n- `2 <= n <= 10^5`\n- `n - 1 <= connections.length <= 10^5`\n- `0 <= ai, bi <= n - 1`\n- `ai != bi`\n- `Connections are unique and undirected.`\n\n**`Explanation:`** \n`In this example, the network consists of 7 servers and 8 connections. The critical connections are between servers `1-6`, `2-4`, and `1-3`. Removing any of these connections would result in at least one server being isolated from the rest of the network.`\n",
    "title": "Critical Connection",
    "default_testcase": {
        "id": 1835,
        "input": "7 8\n6 1\n4 2\n2 5\n1 5\n0 1\n1 2\n2 0\n1 3",
        "expected_output": "1 6\n2 4\n1 3\n",
        "code_problem_id": 268,
        "created_at": "2022-11-06T09:50:01.794Z",
        "updated_at": "2022-11-06T09:50:01.794Z"
    },
    "problem_type": "level_test",
    "code_skeletons": [
        {
            "id": 365,
            "code_problem_id": 268,
            "language": {
                "id": 11,
                "name": "C++ (GCC 9.2.0)",
                "judge0_language_id": 54
            },
            "skeleton_define_class": "class Solution {\npublic:\n  vector<vector<int>> criticalConnections(int n, vector<vector<int>>& g) {\n    //Write your code here",
            "skeleton_class_end": "            }\n        }\n    }\n};",
            "skeleton_solution_class": ""
        },
        {
            "id": 600,
            "code_problem_id": 268,
            "language": {
                "id": 25,
                "name": "Java (OpenJDK 13.0.1)",
                "judge0_language_id": 62
            },
            "skeleton_define_class": "class Solution {\n    public List<List<Integer>> criticalConnections(int n, List<List<Integer>> g) {\n      //Write your code here",
            "skeleton_class_end": "            }\n        }\n    }\n}",
            "skeleton_solution_class": ""
        },
        {
            "id": 601,
            "code_problem_id": 268,
            "language": {
                "id": 39,
                "name": "Python (3.8.1)",
                "judge0_language_id": 71
            },
            "skeleton_define_class": "class Solution:\n    def criticalConnections(self, n, connections):\n        #Write your code here",
            "skeleton_class_end": "",
            "skeleton_solution_class": ""
        },
        {
            "id": 602,
            "code_problem_id": 268,
            "language": {
                "id": 26,
                "name": "JavaScript (Node.js 12.14.0)",
                "judge0_language_id": 63
            },
            "skeleton_define_class": "class Solution {\n    constructor() {\n        this.time = 0;\n        this.ans = [];\n        this.disc = [];\n        this.low = [];\n        this.parent = [];\n    }\n\n    criticalConnections(n, connections) {\n      //Write your code here",
            "skeleton_class_end": "   }\n}",
            "skeleton_solution_class": ""
        }
    ]
}