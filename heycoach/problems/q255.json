{
    "id": 255,
    "description": "\nGiven an integer array nums and an integer k, return the `maximum sum` of a non-empty subsequence of that array such that for every two `consecutive` integers in the subsequence, nums[i] and nums[j], where i < j, the condition j - i <= k is satisfied.\n\nA subsequence of an array is obtained by deleting some number of elements (can be zero) from the array, leaving the remaining elements in their original order.\n### Example 1 \n\n### Input\n```CPP\nnums = [10,2,-10,5,20], k = 2\n``` \n### Output \n```CPP \n37\n``` \n#### Explanation:\nThe subsequence is [10, 2, 5, 20].\n\n\n\n\n### Example 2 \n\n### Input\n```CPP\nnums = [-1,-2,-3], k = 1\n``` \n### Output \n```CPP \n-1\n``` \n\n#### Explanation:\nThe subsequence must be non-empty, so we choose the largest number.\n\n\n### Constraints:\n\n* 1 <= k <= nums.length <= 10^5\n* -10^4 <= nums[i] <= 10^4\n",
    "title": "Subsequence Sum",
    "default_testcase": {
        "id": 1775,
        "input": "5 2\n654\n965\n-965\n-584\n124",
        "expected_output": "1619",
        "code_problem_id": 255,
        "created_at": "2022-11-05T18:07:20.128Z",
        "updated_at": "2022-11-05T18:07:20.128Z"
    },
    "problem_type": "practice",
    "code_skeletons": [
        {
            "id": 453,
            "code_problem_id": 255,
            "language": {
                "id": 11,
                "name": "C++ (GCC 9.2.0)",
                "judge0_language_id": 54
            },
            "skeleton_define_class": null,
            "skeleton_class_end": null,
            "skeleton_solution_class": "class Solution {\npublic:\n    int constrainedSubsetSum(vector < int > & nums, int k) {\n      // write your code here\n    }\n};"
        }
    ]
}