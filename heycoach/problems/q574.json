{
    "id": 574,
    "description": "In this problem, you are tasked with determining whether a given number is a \"looping number.\" A looping number is defined by the following process:\n\n```\n\n1. Start with any positive integer.\n2. Replace the number with the sum of the squares of its digits.\n3. Repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1.\n4. If, at any stage of this process, the number forms a cycle that includes 1, it is deemed a looping number. Your objective is to create a function that accepts an integer as input and returns true if it becomes a looping number by reaching 1, and false otherwise.\n\n```\n          \n\n#### For example:\n\n**1.** `A number like 23 is a looping number because the process`                                                           \n\n` (2^2 + 3^2 = 13, 1^2 + 3^2 = 10, 1^2 + 0^2 = 1) eventually reaches 1.` \n\n**2.** `A number like 4 is not a looping number because it enters a cycle`  \n`(4^2 = 16, 1^2 + 6^2 = 37,  3^2 + 7^2 = 58, 5^2 + 8^2 = 89, 8^2 + 9^2 = 145, 1^2 + 4^2 + 5^2 = 42,`\n `4^2 + 2^2 = 20, 2^2 + 0^2 = 4) that does not include 1. `                                                                                  \n\n```The challenge is to identify whether a given number will continue indefinitely in a cycle or eventually reach the number 1.```\n\n  \n#### `Input: `\n`A single integer n.  `   \n####  `Output:`\n` Return true if n is a looping number, and false if not.`\n\n#### `Example 1:`\n\n#### `Input:` \n`n = 23`  \n\n#### `Output:`\n` true` \n####  `Example 2:`\n\n#### `Input: n = 4 n  n n  `  \n#### `Output:` \n`true`  \n#### `Constraints:`\n\n- `1 <= n <= 2^31 - 1` \n- `Your task is to implement the function isLoopingNumber(n) which will check for the looping number property for the given input n.`",
    "title": "Detecting Looping Numbers",
    "default_testcase": {
        "id": 3827,
        "input": "23",
        "expected_output": "true\n",
        "code_problem_id": 574,
        "created_at": "2024-01-21T11:59:51.066Z",
        "updated_at": "2024-01-21T11:59:51.066Z"
    },
    "problem_type": "practice",
    "code_skeletons": [
        {
            "id": 1715,
            "code_problem_id": 574,
            "language": {
                "id": 11,
                "name": "C++ (GCC 9.2.0)",
                "judge0_language_id": 54
            },
            "skeleton_define_class": "class Solution {\npublic:\n    bool isLoopingNumber(int n) {",
            "skeleton_class_end": "   }\n};",
            "skeleton_solution_class": ""
        },
        {
            "id": 1716,
            "code_problem_id": 574,
            "language": {
                "id": 25,
                "name": "Java (OpenJDK 13.0.1)",
                "judge0_language_id": 62
            },
            "skeleton_define_class": "class Solution {\n    public boolean isLoopingNumber(int n) {",
            "skeleton_class_end": "    }\n}",
            "skeleton_solution_class": ""
        },
        {
            "id": 1876,
            "code_problem_id": 574,
            "language": {
                "id": 39,
                "name": "Python (3.8.1)",
                "judge0_language_id": 71
            },
            "skeleton_define_class": "class Solution:\n    def is_looping_number(self, n):",
            "skeleton_class_end": "",
            "skeleton_solution_class": ""
        },
        {
            "id": 1877,
            "code_problem_id": 574,
            "language": {
                "id": 26,
                "name": "JavaScript (Node.js 12.14.0)",
                "judge0_language_id": 63
            },
            "skeleton_define_class": "class Solution {\n    isLoopingNumber(n) {",
            "skeleton_class_end": "       }\n}",
            "skeleton_solution_class": ""
        }
    ]
}