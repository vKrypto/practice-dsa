{
    "id": 50,
    "description": "You have given an array **arr** consisting of **N integers** which may **contain duplicates** and an integer **target**. Return a list of all **unique combinations** of numbers where the chosen numbers sum to target.\nThe **same number** can only be chosen once from the array. Two combinations are unique if the frequency of at least one of the chosen numbers is different.\n**Note** :\n* Elements in each combination should be in **non-decreasing order**\n* The combinations themselves must also be sorted in **lexographically increasing** order\n\n### Example 1 \n\n### Input\n```CPP\narr = [1,2,2,5,2], target = 5\n``` \n### Output \n```CPP \n [[[1,2,2],[5]] \n``` \n#### Explanation:\n\nAbove are all the unique combinations of numbers in array which sums up to target 5 and are in lexographically increasing order.\n\n### Example 2 \n\n### Input\n```CPP\narr = [2,3,5], target = 8\n``` \n### Output \n```CPP \n[[3,5]]\n``` \n#### Explanation:\n\nAbove are all the unique combinations of numbers in array which sums up to target 8 and are in lexographically increasing order.\n\n\n### Constraints:\n\n* 1 <= N <= 20\n* 2 <= arr[i] <= 30\n* 1 <= target <= 100\n",
    "title": "Combination sum 2",
    "default_testcase": {
        "id": 7223,
        "input": "7 8\n10 1 2 7 6 1 5",
        "expected_output": "1 1 6\n1 2 5\n1 7\n2 6\n",
        "code_problem_id": 50,
        "created_at": "2024-04-07T11:49:11.069Z",
        "updated_at": "2024-04-07T11:49:11.069Z"
    },
    "problem_type": "level_test",
    "code_skeletons": [
        {
            "id": 80,
            "code_problem_id": 50,
            "language": {
                "id": 11,
                "name": "C++ (GCC 9.2.0)",
                "judge0_language_id": 54
            },
            "skeleton_define_class": "class Solution {\npublic:\n    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {",
            "skeleton_class_end": "       }\n    }\n\n};",
            "skeleton_solution_class": ""
        },
        {
            "id": 471,
            "code_problem_id": 50,
            "language": {
                "id": 25,
                "name": "Java (OpenJDK 13.0.1)",
                "judge0_language_id": 62
            },
            "skeleton_define_class": "class Solution {\n      public List<List<Integer>> combinationSum2(int[] arr, int target) {",
            "skeleton_class_end": "    }\n\n}",
            "skeleton_solution_class": ""
        },
        {
            "id": 658,
            "code_problem_id": 50,
            "language": {
                "id": 39,
                "name": "Python (3.8.1)",
                "judge0_language_id": 71
            },
            "skeleton_define_class": "class Solution:\n    def combinationSum2(self, candidates, target):",
            "skeleton_class_end": "",
            "skeleton_solution_class": ""
        },
        {
            "id": 659,
            "code_problem_id": 50,
            "language": {
                "id": 26,
                "name": "JavaScript (Node.js 12.14.0)",
                "judge0_language_id": 63
            },
            "skeleton_define_class": "   class Solution {\n    constructor() {}\n     \ncombinationSum2 (candidates, target) {\n  //Write your code here;",
            "skeleton_class_end": "    }\n}",
            "skeleton_solution_class": ""
        }
    ]
}