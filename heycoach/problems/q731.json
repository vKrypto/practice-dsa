{
    "id": 731,
    "description": "You are planning to update a network of roads to different cities. There already exists roads that connects multiple cities together but the cost of maintenance of all those road is getting too much to handle and thus we wish to now only keep roads in such a way that their maintenance cost remains minimum and at the same time there exists a way to visit every city. The way how we reach that city is not an issue.\n\nYou are given two integer 'c' denoting the number of cities and 'r' denoting the total number of roads that connects them. Then the next 'r' lines contains the first city that it connects to, the cost of maintenance of that road and the second city. You have to return the total minimum cost of maintenance after updation of roads.\n```\nFor example consider this example:\n\n```\n          1\n        /c=2\\c=1\n       /     \\  \n      2 ------3\n         c=3\n```\nIn this example there are three cities 1,2 and 3 and there is a road that connects 1-2 with a cost of 2, a road that connects 2-3 with a cost of 3 and a road between 1-3 and the cost of maintenance for that one is 1.\n\nWe can update these network of roads in the following manner.\n```\n          1\n        /c=2\\c=1\n       /     \\  \n      2       3\n```\nThe total cost before was 6 and after updation the total maintenance is 3 thus the correct answer is 3.\n```\n#### `Input Format:`\n\n- `First line contains two integers 'n' and 'r' denoting the number of cities and total number of roads.`\n\n - `The next 'r' lines contains the three information the two cities in between which the road exists and the cost of maintenance of that road.`\n\n#### `Output Format:`\n\n`Return the minimum cost of maintenance that can be achieved by updating the network of roads.`\n#### `Sample Input:`\n```\n2 1  \n0 1 5\n```\n#### `Sample Output:`\n`5`</br>\n#### `Constraints:`\n\n- `1<=n<=1000`\n\n- `n-1<=r<=(n*(n-1))/2`\n\n- `0<=cost<=1000`",
    "title": "Road Conversion",
    "default_testcase": {
        "id": 4956,
        "input": "2 1\n0 1 5",
        "expected_output": "5\n",
        "code_problem_id": 731,
        "created_at": "2024-02-03T07:45:56.850Z",
        "updated_at": "2024-02-03T07:45:56.850Z"
    },
    "problem_type": "session_assignment",
    "code_skeletons": [
        {
            "id": 2337,
            "code_problem_id": 731,
            "language": {
                "id": 11,
                "name": "C++ (GCC 9.2.0)",
                "judge0_language_id": 54
            },
            "skeleton_define_class": "//Definition of road class\n/*\nclass Road{\n    public:\n        int cost;\n        int p1;\n        int p2;\n};\n*/\n\nclass Solution{  \n    public:\n    int solve(Road roads[], int n, int r){\n      //Write your code here",
            "skeleton_class_end": "    }\n};",
            "skeleton_solution_class": ""
        },
        {
            "id": 2338,
            "code_problem_id": 731,
            "language": {
                "id": 39,
                "name": "Python (3.8.1)",
                "judge0_language_id": 71
            },
            "skeleton_define_class": "#Definition of the road class.\n\"\"\"\nclass Road:\n    def __init__(self, cost, p1, p2):\n        self.cost = cost\n        self.p1 = p1\n        self.p2 = p2\n\"\"\"\n\nclass Solution:\n    def solve(self, roads, n, r):\n      #Write your code here",
            "skeleton_class_end": "",
            "skeleton_solution_class": ""
        },
        {
            "id": 2339,
            "code_problem_id": 731,
            "language": {
                "id": 25,
                "name": "Java (OpenJDK 13.0.1)",
                "judge0_language_id": 62
            },
            "skeleton_define_class": "//Definition of road class;\n/*\nclass Road {\n    int cost;\n    int p1;\n    int p2;\n}\n*/\n\nclass Solution {\n    public int solve(Road roads[], int n, int r) {\n      //Write your code here\n      ",
            "skeleton_class_end": "    }\n}",
            "skeleton_solution_class": ""
        },
        {
            "id": 2340,
            "code_problem_id": 731,
            "language": {
                "id": 26,
                "name": "JavaScript (Node.js 12.14.0)",
                "judge0_language_id": 63
            },
            "skeleton_define_class": "//Definition of road class\n/*\nclass Road {\n    constructor(cost, p1, p2) {\n        this.cost = cost;\n        this.p1 = p1;\n        this.p2 = p2;\n    }\n}*/\n\nclass Solution {\n    solve(roads, n, r) {\n      ",
            "skeleton_class_end": "    }\n}",
            "skeleton_solution_class": ""
        }
    ]
}