{
    "id": 61,
    "description": "You are given a license key represented as a string s that consists of only **alphanumeric** characters and **dashes**. You are also given an integer k.\n\nWe want to reformat the string s such that each group contains exactly k characters, except for the first group, which could be **shorter** than k but still **must contain at least one** character. Furthermore, there must be a dash inserted between two groups, and you should convert all lowercase letters to uppercase.\n\nReturn the reformatted license key.\n\n### Example 1 \n\n### Input\n```CPP\ns = \"5F3Z-2e-9-w\", k = 4\n``` \n### Output \n```CPP \n\"5F3Z-2E9W\"\n``` \n#### Explanation:\n\nThe string s has been split into two parts, each part has 4 characters.\nNote that the two extra dashes are not needed and can be removed.\n\n### Example 2 \n\n### Input\n```CPP\ns = \"2-5g-3-J\", k = 2\n``` \n### Output \n```CPP \n\"2-5G-3J\"\n``` \n#### Explanation:\n\nThe string s has been split into three parts, each part has 2 characters except the first part as it could be shorter as mentioned above.\n\n### Input\n```CPP\ns = \"---\", k = 3\n``` \n### Output \n```CPP \n\"\"\n``` \n#### Explanation:\n\nIf there are **only dashes** in the string s then simply return an empty string\n\n\n### Constraints:\n\n* 1 <= s.length <= 10000\n* 1 <= k <= 1000\n* s contains English alphabets,numeric digits and dashes.\n",
    "title": "License key formatting",
    "default_testcase": {
        "id": 420,
        "input": "5F3Z-2e-9-w\n4",
        "expected_output": "5F3Z-2E9W\n",
        "code_problem_id": 61,
        "created_at": "2022-09-29T07:06:27.723Z",
        "updated_at": "2022-09-29T07:06:27.723Z"
    },
    "problem_type": "practice",
    "code_skeletons": [
        {
            "id": 108,
            "code_problem_id": 61,
            "language": {
                "id": 11,
                "name": "C++ (GCC 9.2.0)",
                "judge0_language_id": 54
            },
            "skeleton_define_class": null,
            "skeleton_class_end": null,
            "skeleton_solution_class": "\nclass Solution\n{\npublic:\n\n\tstring reformatString(string S, int K) {\n      // write your code here \n\t}\n};"
        },
        {
            "id": 477,
            "code_problem_id": 61,
            "language": {
                "id": 25,
                "name": "Java (OpenJDK 13.0.1)",
                "judge0_language_id": 62
            },
            "skeleton_define_class": null,
            "skeleton_class_end": null,
            "skeleton_solution_class": "class Solution {\n    public String reformatString(String S, int K) {\n        // write your code here\n    }\n}\n"
        }
    ]
}