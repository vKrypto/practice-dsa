{
    "id": 98,
    "description": "\nThe task is to count all the possible paths from top left to bottom right of a **m** X **n** matrix with the constraints that from each cell you can either move **only to right or down**.\n**Note**:The answer may be very large, compute the `answer modulo 10^9 + 7`.\n\n### Example 1 \n\n### Input\n```CPP \nm = 2, n = 2\n``` \n### Output \n```CPP \n2\n``` \n#### Explanation:\nTwo possible ways are RD and DR.\n\n### Example 2 \n\n### Input\n```CPP\nm = 3, n = 3\n```\n### Output \n```CPP \n6\n``` \n#### Explanation:\n\nSix possible ways are RRDD, DDRR, RDDR, DRRD, RDRD, DRDR.\n\n### Constraints:\n\n* 1 <= m,n <= 100",
    "title": "Number of paths in a grid",
    "default_testcase": {
        "id": 722,
        "input": "3 3",
        "expected_output": "6\n",
        "code_problem_id": 98,
        "created_at": "2022-10-04T11:27:14.797Z",
        "updated_at": "2022-10-04T11:27:14.797Z"
    },
    "problem_type": "practice",
    "code_skeletons": [
        {
            "id": 132,
            "code_problem_id": 98,
            "language": {
                "id": 11,
                "name": "C++ (GCC 9.2.0)",
                "judge0_language_id": 54
            },
            "skeleton_define_class": null,
            "skeleton_class_end": null,
            "skeleton_solution_class": "class Solution {\npublic:\n    long long int numberOfPaths(int m, int n) {\n      // write your code here\n    }\n};"
        },
        {
            "id": 501,
            "code_problem_id": 98,
            "language": {
                "id": 25,
                "name": "Java (OpenJDK 13.0.1)",
                "judge0_language_id": 62
            },
            "skeleton_define_class": null,
            "skeleton_class_end": null,
            "skeleton_solution_class": "class Solution {\n    long numberOfPaths(int m, int n) {\n      // write your code here\n    }\n}\n\n"
        }
    ]
}