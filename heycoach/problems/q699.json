{
    "id": 699,
    "description": "Given a Binary Tree, find Left view of it. Left view of a Binary Tree is set of nodes visible when tree is viewed from Left side.\n\n### Example 1\n\n### Input\n\n```CPP\nroot = [1,2,3,null,5,null,4]\n```\n\n### Output\n\n```CPP\n\n[1,2,5]\n```\n\n### Example 2\n\n### Input\n\n```CPP\nroot = [1,null,3]\n```\n\n### Output\n\n```CPP\n [1,3]\n```\n\n### Input Format\n\n```\nSingle line contaning Root of tree\n```\n\n### Output Format\n\n```CPP\nAn integer Array, denoting leftside view of the tree\n```\n\n### Constraints:\n\n`The number of nodes in the tree is in the range [0, 100]`\n\n` -100 <= Node.val <= 100`\n",
    "title": "Left View",
    "default_testcase": {
        "id": 4647,
        "input": "   1\n   2\n   3\nnull\n   5\nnull\n   4\n   3\nnull\n  51\nnull\n  14\n   3\nnull\n   5\n  90    \n",
        "expected_output": "1 2 5 3 14 90 ",
        "code_problem_id": 699,
        "created_at": "2024-01-28T07:23:09.905Z",
        "updated_at": "2024-01-28T07:23:09.905Z"
    },
    "problem_type": "practice",
    "code_skeletons": [
        {
            "id": 2195,
            "code_problem_id": 699,
            "language": {
                "id": 11,
                "name": "C++ (GCC 9.2.0)",
                "judge0_language_id": 54
            },
            "skeleton_define_class": "struct Node {\n    int data;\n    Node *left, *right;\n\n    Node(int value) {\n        data = value;\n        left = right = nullptr;\n    }\n};\n\nvoid levelOrderInsert(Node *&root, vector<string> &values) {",
            "skeleton_class_end": "}",
            "skeleton_solution_class": ""
        },
        {
            "id": 2224,
            "code_problem_id": 699,
            "language": {
                "id": 25,
                "name": "Java (OpenJDK 13.0.1)",
                "judge0_language_id": 62
            },
            "skeleton_define_class": "\n\n\n\nclass Node {\n    int data;\n    Node left, right;\n\n    Node(int value) {\n        data = value;\n        left = right = null;\n    }\n}\n\nclass Solution {",
            "skeleton_class_end": "}",
            "skeleton_solution_class": ""
        },
        {
            "id": 2225,
            "code_problem_id": 699,
            "language": {
                "id": 39,
                "name": "Python (3.8.1)",
                "judge0_language_id": 71
            },
            "skeleton_define_class": "\nclass Node:\n    def __init__(self, value):\n        self.data = value\n        self.left = None\n        self.right = None\n\nclass Solution:",
            "skeleton_class_end": "",
            "skeleton_solution_class": ""
        },
        {
            "id": 2248,
            "code_problem_id": 699,
            "language": {
                "id": 26,
                "name": "JavaScript (Node.js 12.14.0)",
                "judge0_language_id": 63
            },
            "skeleton_define_class": "class Node {\n    constructor(value) {\n        this.data = value;\n        this.left = null;\n        this.right = null;\n    }\n}\n\nclass Solution {",
            "skeleton_class_end": "",
            "skeleton_solution_class": ""
        }
    ]
}