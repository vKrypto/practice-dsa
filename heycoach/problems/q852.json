{
    "id": 852,
    "description": "Design a task based on a real-life scenario where multiple people are waiting to use a single elevator on the first floor, and each person wants to go to a different floor. You need to calculate the minimal amount of time required to transport all people to their desired floors using an elevator that has a limited capacity.\n\n**Scenario Description:**\n\n- There are `n` people on the first floor.\n- Each person wants to go to a specific floor `fi`.\n- The elevator can carry up to `k` people at once.\n- The elevator takes `|a - b|` seconds to move from floor `a` to floor `b`.\n- The task is to determine the minimal time needed to transport all people to their respective floors and return the elevator to the first floor.\n\n**Input Format:**\n\n- The first line contains two integers, `n` and `k`, where `n` is the number of people and `k` is the maximum capacity of the elevator.\n- The second line contains `n` integers, `f1, f2, ..., fn`, representing the target floor for each person.\n\n**Output Format:**\n\n- Output a single integer representing the minimal time required to achieve the goal.\n\n**Constraints:**\n\n- 1 \u2264 n, k \u2264 2000\n- 2 \u2264 fi \u2264 2000\n\n**Examples:**\n\n**Example 1:**\n\n#### Input:\n```\n3 2\n2 3 4\n```\n\n#### Output:\n```\n8\n```\n\n**Example 2:**\n\n#### Input:\n```\n4 2\n50 100 50 100\n```\n\n#### Output:\n```\n296\n```\n\n**Example 3:**\n\n#### Input:\n```\n10 3\n2 2 2 2 2 2 2 2 2 2\n```\n\n#### Output:\n```\n8\n```\n\n**`Explanation for Examples:`**\n\n- **Example 1:** `With a capacity of 2, the elevator can take the first two people to floors 2 and 3, then return to pick up the third person and take them to floor 4. The total time is calculated based on the elevator's trips between these floors and back to the first floor.`\n- **Example 2:** `The elevator strategy involves grouping people going to the same floors together and optimizing the order of stops to minimize total travel time.`\n- **Example 3:** `Since all people need to go to the same floor, the elevator makes minimal trips depending on its capacity.`\n",
    "title": "Design Tutorial: Learn from Life",
    "default_testcase": {
        "id": 7823,
        "input": "5 3\n10 20 10 10 20",
        "expected_output": "56",
        "code_problem_id": 852,
        "created_at": "2024-05-13T10:53:57.799Z",
        "updated_at": "2024-05-13T10:53:57.799Z"
    },
    "problem_type": "practice",
    "code_skeletons": [
        {
            "id": 2796,
            "code_problem_id": 852,
            "language": {
                "id": 11,
                "name": "C++ (GCC 9.2.0)",
                "judge0_language_id": 54
            },
            "skeleton_define_class": "class Solution {\npublic:\n    int designtutorial(int n, int k, vector<int>& a) { \n    //Write your code here",
            "skeleton_class_end": "    }\n};",
            "skeleton_solution_class": ""
        },
        {
            "id": 2797,
            "code_problem_id": 852,
            "language": {
                "id": 25,
                "name": "Java (OpenJDK 13.0.1)",
                "judge0_language_id": 62
            },
            "skeleton_define_class": "class Solution {\n    public int designtutorial(int n, int k, int[] a) {\n      //Write your code here\n",
            "skeleton_class_end": "    }\n}",
            "skeleton_solution_class": ""
        },
        {
            "id": 2798,
            "code_problem_id": 852,
            "language": {
                "id": 39,
                "name": "Python (3.8.1)",
                "judge0_language_id": 71
            },
            "skeleton_define_class": "class Solution:\n  def designtutorial(self, n, k, a):\n    #Write your code here\n",
            "skeleton_class_end": "",
            "skeleton_solution_class": ""
        },
        {
            "id": 2799,
            "code_problem_id": 852,
            "language": {
                "id": 26,
                "name": "JavaScript (Node.js 12.14.0)",
                "judge0_language_id": 63
            },
            "skeleton_define_class": "class Solution {\n    designtutorial(n, k, a) {\n      //Write your code here\n ",
            "skeleton_class_end": "    }\n}",
            "skeleton_solution_class": ""
        }
    ]
}