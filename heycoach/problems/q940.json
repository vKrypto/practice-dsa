{
    "id": 940,
    "description": "A Happy meal is a meal that contains exactly two different food items with a sum of deliciousness equal to a power of two. You can pick any two different foods to make a good meal.  Given an array of integers deliciousness of length n where deliciousness[i] is the deliciousness of the i\u200b\u200b\u200b\u200b\u200b\u200bth\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b item of food, return the number of different Happy meals you can make from this list modulo 10^9 + 7. \n\n**Note** that items with different indices are considered different even if they have the same deliciousness value.\n\n**Example 1:**\n```\nInput: n = 5, deliciousness = [1,3,5,7,9] \n\nOutput: 4 \n\nExplanation: \n\nThe happy meals are (1,3), (1,7), (3,5) and, (7,9). Their respective sums are 4, 8, 8, and 16, all of which are powers of 2. \n````\n**Example 2**: \n```\nInput: n = 7, deliciousness = [1,1,1,3,3,3,7] \n\nOutput: 15 \n\nExplanation: \n\nThe happy meals are (1,1) with 3 ways, (1,3) with 9 ways, and (1,7) with 3 ways. \n```\n\n**Input Format:**\n```\nThe first line contains an integer n \u2014 the number of elements in the array deliciousness.\nThe second line contains n space-separated integers \u2014 the elements of the array deliciousness.\n```\n**Output Format:**\n```\nPrint a single integer \u2014 the number of different Happy meals you can make from this list modulo 109 + 7. \n```\n\n\n\n**Constraints:** \n\n`1 <= n <= 10^5`\n\n`0 <= deliciousness[i] <= 2^20`\n",
    "title": "Number of Distinct Happy Meals",
    "default_testcase": {
        "id": 8250,
        "input": "5\n1 3 5 7 9",
        "expected_output": "4\n",
        "code_problem_id": 940,
        "created_at": "2024-05-24T13:11:02.656Z",
        "updated_at": "2024-05-24T13:11:02.656Z"
    },
    "problem_type": "practice",
    "code_skeletons": [
        {
            "id": 3128,
            "code_problem_id": 940,
            "language": {
                "id": 11,
                "name": "C++ (GCC 9.2.0)",
                "judge0_language_id": 54
            },
            "skeleton_define_class": "\nclass Solution {\npublic:\n    int countPairs(int n, vector<int>& deliciousness) {",
            "skeleton_class_end": "}\n};",
            "skeleton_solution_class": ""
        },
        {
            "id": 3129,
            "code_problem_id": 940,
            "language": {
                "id": 25,
                "name": "Java (OpenJDK 13.0.1)",
                "judge0_language_id": 62
            },
            "skeleton_define_class": "\nclass Solution {\n    public int countPairs(int n, int[] deliciousness) {",
            "skeleton_class_end": "}\n}",
            "skeleton_solution_class": ""
        },
        {
            "id": 3130,
            "code_problem_id": 940,
            "language": {
                "id": 39,
                "name": "Python (3.8.1)",
                "judge0_language_id": 71
            },
            "skeleton_define_class": "class Solution:\n    def countPairs(self, n, deliciousness):",
            "skeleton_class_end": "",
            "skeleton_solution_class": ""
        },
        {
            "id": 3131,
            "code_problem_id": 940,
            "language": {
                "id": 26,
                "name": "JavaScript (Node.js 12.14.0)",
                "judge0_language_id": 63
            },
            "skeleton_define_class": "class Solution {\n    countPairs(n, deliciousness) {",
            "skeleton_class_end": "}\n}",
            "skeleton_solution_class": ""
        }
    ]
}