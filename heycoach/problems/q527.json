{
    "id": 527,
    "description": "In a serene forest, a mystical tree known as the \"Tree of Connections\" held the secrets of familial ties among its inhabitants. Rosie, a curious rabbit searching for her cousin Sammy, sought the tree's guidance. With wise owl Oliver's help, Rosie entered the tree's hidden realm, discovering an intricate family tree. She diligently found her cousin Sammy among the cousins, printing their names while avoiding siblings. Rosie's journey not only reunited her with Sammy but also revealed the forest's interconnected relationships, all thanks to the magical Tree of Connections.\nYour Job is to print all the cousins that Rosie found discovering the intricate family tree.\n\nInput: \nint t, number of testcases.\nint targetNode, value of node for which cousin need to be found.\nString s, binary in form of string.\ntargetNode, value of node for which cousin need to be found.\n\nOutput:\nPrint all cousins of targetNode in given binary tree.\n\nSample Input:\n1\n7\n1 2 3 N N 4 6 N 5 N N 7 N\n\nSample Output:\n-1\n\nExplaination:\nFor node 7 there is no node present in the same level with different parent. So print -1 if no cousin present.\n\nConstriants:\nN, number of node <=1000\ntargetNode must present in the given binary tree.\n",
    "title": "Cousins in binary tree",
    "default_testcase": {
        "id": 3549,
        "input": "1\n7\n1 2 3 N N 4 6 N 5 N N 7 N",
        "expected_output": "-1 \n",
        "code_problem_id": 527,
        "created_at": "2024-01-05T18:17:36.287Z",
        "updated_at": "2024-01-05T18:17:36.287Z"
    },
    "problem_type": "session_assignment",
    "code_skeletons": [
        {
            "id": 1562,
            "code_problem_id": 527,
            "language": {
                "id": 11,
                "name": "C++ (GCC 9.2.0)",
                "judge0_language_id": 54
            },
            "skeleton_define_class": null,
            "skeleton_class_end": null,
            "skeleton_solution_class": "class Solution\n{\n    public:\n    vector<int> printCousins(Node* root, Node* node_to_find)\n    {\n        //code here\n     \n    }\n    \n};\n\n"
        },
        {
            "id": 1566,
            "code_problem_id": 527,
            "language": {
                "id": 39,
                "name": "Python (3.8.1)",
                "judge0_language_id": 71
            },
            "skeleton_define_class": null,
            "skeleton_class_end": null,
            "skeleton_solution_class": "class Solution:\n    def printCousins(self, root, node_to_find):\n\n\n\n"
        },
        {
            "id": 1568,
            "code_problem_id": 527,
            "language": {
                "id": 25,
                "name": "Java (OpenJDK 13.0.1)",
                "judge0_language_id": 62
            },
            "skeleton_define_class": null,
            "skeleton_class_end": null,
            "skeleton_solution_class": "class Solution\n{\n    public static ArrayList<Integer> printCousins(Node root, Node x)\n    {\n        \n        \n    }\n}"
        },
        {
            "id": 1572,
            "code_problem_id": 527,
            "language": {
                "id": 26,
                "name": "JavaScript (Node.js 12.14.0)",
                "judge0_language_id": 63
            },
            "skeleton_define_class": null,
            "skeleton_class_end": null,
            "skeleton_solution_class": "class Solution {\n    printCousins(root, node_to_find) {\n\n    }\n}\n\n"
        }
    ]
}