{
    "id": 425,
    "description": "You are given two non-empty linked lists representing two non-negative integers. The most significant digit comes first and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.\n\nYou may assume the two numbers do not contain any leading zero, except the number 0 itself. \n\n\n#### Input Format:\n```\nThe input consists of multiple lines:\n1. The first line contains two integers, l1 and l2, representing the number of nodes in the first and second linked lists, respectively.\n2. The second line contains l1 integers, the digits of the first number in reverse order, each digit separated by a space.\n3. The third line contains l2 integers, the digits of the second number in reverse order, each digit separated by a space.\n```\n#### Example Input:\n```\n4 3\n1 3 6 9\n2 4 3\n```\n- ```This example indicates that the first linked list (`l1`) has 4 nodes with the digits [1, 3, 6, 9] (representing the number 9613 in normal order), and the second linked list (`l2`) has 3 nodes with the digits [2, 4, 3] (representing the number 342 in normal order).```\n\n#### Output Format:\n```\nThe output is a single line containing the digits of the sum of the two numbers, represented as a linked list in reverse order, each digit .\n```\n#### Example Output:\n```\n1612\n```\n```\nThis output represents the linked list for the sum 2161, which is shown in reverse as 1612.\n```\n\n#### `Constraints:`\n\n- ```The number of nodes in each linked list is in the range [1, 100].```\n\n- ```0 <= Node.val <= 9```\n\n- ```It is guaranteed that the list represents a number that does not have leading zeros.```",
    "title": "Sum of Linked lists",
    "default_testcase": {
        "id": 2924,
        "input": "4 3\n1 3 6 9\n2 4 3",
        "expected_output": "1612\n",
        "code_problem_id": 425,
        "created_at": "2023-12-12T03:21:26.093Z",
        "updated_at": "2023-12-12T03:21:26.093Z"
    },
    "problem_type": "session_assignment",
    "code_skeletons": [
        {
            "id": 1142,
            "code_problem_id": 425,
            "language": {
                "id": 26,
                "name": "JavaScript (Node.js 12.14.0)",
                "judge0_language_id": 63
            },
            "skeleton_define_class": "/*\nclass Node {\n    constructor(value) {\n        this.val = value;\n        this.next = null;\n    }\n}\n*/\n\n//first is an object of Node\n//second is an object of Node\n//Return type is a Node\n\nclass Solution{\n    addTwoLists(first, second) {\n      //Write your code here and return the sum of numbers as a linked list;",
            "skeleton_class_end": "    }\n}",
            "skeleton_solution_class": ""
        },
        {
            "id": 1143,
            "code_problem_id": 425,
            "language": {
                "id": 11,
                "name": "C++ (GCC 9.2.0)",
                "judge0_language_id": 54
            },
            "skeleton_define_class": "/*\n  class Node {\npublic:\n    int data;\n    Node* next;\n};\n*/\n\nclass Solution{\n    public:\n    Node* addTwoNumbers(Node* l1, Node* l2)\n    {\n      //Write your code here;",
            "skeleton_class_end": "    }\n};",
            "skeleton_solution_class": ""
        },
        {
            "id": 1144,
            "code_problem_id": 425,
            "language": {
                "id": 25,
                "name": "Java (OpenJDK 13.0.1)",
                "judge0_language_id": 62
            },
            "skeleton_define_class": "/*\nclass ListNode {\n    int val;\n    ListNode next;\n    ListNode(int x) { val = x; }\n}\n*/\n\nclass Solution {\n    public static ListNode addTwoNumbers(ListNode l1, ListNode l2) {\n      //Write your code here",
            "skeleton_class_end": "   }\n}",
            "skeleton_solution_class": "\n"
        },
        {
            "id": 1145,
            "code_problem_id": 425,
            "language": {
                "id": 39,
                "name": "Python (3.8.1)",
                "judge0_language_id": 71
            },
            "skeleton_define_class": "'''class Node:\n    def __init__(self, data=None, next=None):\n        self.data = data\n        self.next = next'''\n\nclass Solution:\n    # Function to add two lists, `X` and `Y`\n    def addLists(self, X, Y):\n        # Write your code here",
            "skeleton_class_end": "",
            "skeleton_solution_class": ""
        }
    ]
}