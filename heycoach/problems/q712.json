{
    "id": 712,
    "description": "\nA `valid encoding` of an array of words is any reference string s and array of indices indices such that:\n\nwords.length == indices.length\nThe reference string s ends with the '#' character.\nFor each index indices[i], the substring of s starting from indices[i] and up to (but not including) the next '#' character is equal to words[i].\nGiven an array of words, return the `length of the shortest reference` string s possible of any `valid encoding` of words.\n\n### Example 1\n\n### Input\n\n```CPP\nwords = [\"time\", \"me\", \"bell\"]\n```\n\n### Output\n\n```CPP\n10\n```\n\n#### Explanation:\n\nA valid encoding would be s = \"time#bell#\" and indices = [0, 2, 5].\nwords[0] = \"time\", the substring of s starting from indices[0] = 0 to the next '#' is underlined in \"time#bell#\"\nwords[1] = \"me\", the substring of s starting from indices[1] = 2 to the next '#' is underlined in \"time#bell#\"\nwords[2] = \"bell\", the substring of s starting from indices[2] = 5 to the next '#' is underlined in \"time#bell#\"\n\n### Example 2\n\n### Input\n\n```CPP\n words = [\"t\"]\n```\n\n### Output\n\n```CPP\n2\n```\n\n#### Explanation:\n\nA valid encoding would be s = \"t#\" and indices = [0].\n\n### Constraints:\n\n- 1 <= words.length <= 2000\n- 1 <= words[i].length <= 7\n- words[i] consists of only lowercase letters.\n",
    "title": "Encoder",
    "default_testcase": {
        "id": 4811,
        "input": "4\nejfgkh\nmeequ\nbejll\njtaff",
        "expected_output": "25",
        "code_problem_id": 712,
        "created_at": "2024-02-01T07:21:16.302Z",
        "updated_at": "2024-02-01T07:21:16.302Z"
    },
    "problem_type": "practice",
    "code_skeletons": [
        {
            "id": 2264,
            "code_problem_id": 712,
            "language": {
                "id": 11,
                "name": "C++ (GCC 9.2.0)",
                "judge0_language_id": 54
            },
            "skeleton_define_class": "class Solution {\npublic:\n  int minimumLengthEncoding(vector<string>& w) {",
            "skeleton_class_end": "   }\n};",
            "skeleton_solution_class": ""
        },
        {
            "id": 2267,
            "code_problem_id": 712,
            "language": {
                "id": 25,
                "name": "Java (OpenJDK 13.0.1)",
                "judge0_language_id": 62
            },
            "skeleton_define_class": "public class Main {\n    public static int minimumLengthEncoding(String[] w) {\n        ",
            "skeleton_class_end": "  }\n",
            "skeleton_solution_class": ""
        },
        {
            "id": 2268,
            "code_problem_id": 712,
            "language": {
                "id": 26,
                "name": "JavaScript (Node.js 12.14.0)",
                "judge0_language_id": 63
            },
            "skeleton_define_class": "function minimumLengthEncoding(w) {",
            "skeleton_class_end": "}",
            "skeleton_solution_class": ""
        },
        {
            "id": 2269,
            "code_problem_id": 712,
            "language": {
                "id": 39,
                "name": "Python (3.8.1)",
                "judge0_language_id": 71
            },
            "skeleton_define_class": "    def minimumLengthEncoding(self, words):",
            "skeleton_class_end": "",
            "skeleton_solution_class": ""
        }
    ]
}