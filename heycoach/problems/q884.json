{
    "id": 884,
    "description": "Alice has an array a which are present in the range 0-99. She can do the below operation on any element 'i' of the array.\n\nShe can break the number in their respective digits and make them as individual elements provided that the number has more than one digit.  For example if array was [13, 55, 6] then she can make this array as [1, 3, 55, 6] or she can perform the operation two times and make the array as [1, 3, 5, 5, 6].\n\nDetermine if after some operations (possibly zero) can Alice make her array non-decreasing?\n\nInput Format:\n\nThe first line contains an integer 'n' denoting the size of array.\n\nThe next line contains 'n' space separated integers which are the elements of the array a.\n\nOutput format:\n\nPrint \"YES\" if Alice can make array non decreasing else print \"NO\".\n\n```\nSample input - 1:\n\n4\n12 3 45 67\n\nSample Output - 1:\nYES\n```\n\nExplanation: We can make the array as [1, 2, 3, 45, 67] by applying the operation on number 12.\n\n```\nSample Input - 2:\n\n3\n12 28 5\n\nSample Output:\nNO\n```\n\nExplanation : There is no way to make the array non decreasing.\n\n```\nConstraints:\n\n2 <= n <= 50 \n\n0 <= a[i] <= 99\n```",
    "title": "Break or don't",
    "default_testcase": {
        "id": 7931,
        "input": "4\n12 3 45 67",
        "expected_output": "YES\n",
        "code_problem_id": 884,
        "created_at": "2024-05-14T22:00:15.606Z",
        "updated_at": "2024-05-14T22:00:15.606Z"
    },
    "problem_type": "practice",
    "code_skeletons": [
        {
            "id": 2938,
            "code_problem_id": 884,
            "language": {
                "id": 11,
                "name": "C++ (GCC 9.2.0)",
                "judge0_language_id": 54
            },
            "skeleton_define_class": "class Solution{\n    public:\n    void solve(int n, int A[]){\n      //Write your code here",
            "skeleton_class_end": "    }\n};",
            "skeleton_solution_class": ""
        },
        {
            "id": 2939,
            "code_problem_id": 884,
            "language": {
                "id": 25,
                "name": "Java (OpenJDK 13.0.1)",
                "judge0_language_id": 62
            },
            "skeleton_define_class": "class Solution {\n    public void solve(int n, int[] A) {\n      //Write your code here",
            "skeleton_class_end": "    }\n}",
            "skeleton_solution_class": ""
        },
        {
            "id": 2940,
            "code_problem_id": 884,
            "language": {
                "id": 39,
                "name": "Python (3.8.1)",
                "judge0_language_id": 71
            },
            "skeleton_define_class": "class Solution:\n    def solve(self, n, A):\n      #Write your code here",
            "skeleton_class_end": "",
            "skeleton_solution_class": ""
        },
        {
            "id": 2941,
            "code_problem_id": 884,
            "language": {
                "id": 26,
                "name": "JavaScript (Node.js 12.14.0)",
                "judge0_language_id": 63
            },
            "skeleton_define_class": "class Solution {\n    solve(n, A) {\n      //Write your code here",
            "skeleton_class_end": "    }\n}",
            "skeleton_solution_class": ""
        }
    ]
}