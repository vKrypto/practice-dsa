{
    "id": 440,
    "description": "You are at the school cafeteria, where circular and square sandwiches are offered, labeled by numbers 0 and 1 respectively. All students stand in a queue, each expressing a preference for either square or circular sandwiches.\n\nThe number of sandwiches in the cafeteria equals the number of students. The sandwiches are placed in a stack. At each step:\n\nIf the student at the front of the queue prefers the sandwich on the top of the stack, they will take it and leave the queue.\nOtherwise, they will leave it and go to the queue's end. This continues until none of the queue students want to take the top sandwich and are thus unable to eat.\nYou are given two integer arrays students and sandwiches where sandwiches[i] represents the type of the i\u200b\u200b\u200b\u200b\u200b\u200bth sandwich in the stack (i = 0 is the top of the stack) and students[j] represents the preference of the j\u200b\u200b\u200b\u200b\u200b\u200bth student in the initial queue (j = 0 is the front of the queue). Return the number of students that are unable to eat.\n\n**Input:**\n\nAn array students representing the preferences of students (1 for square, 0 for circular).\nAn array sandwiches representing the types of sandwiches in the stack (1 for square, 0 for circular).\n\n**Output**:\n\nAn integer representing the number of students unable to eat.\n\n**Examples**:\n\n**Input**: \n```\nstudents = [1,3],[2,0],[5,10],[6,-10]], k = 1\n```\n**Output**: \n```\n4\n```\n**Input**: \n```\nstudents = [[0,0],[3,0],[9,2]], k = 3\n```\n**Output**: \n```\n3\n```\n**Constraints**:</br>\n\n- 2 <= points.length <= 10^5</br>\n- points[i].length == 2</br>\n- -10^8 <= xi, yi <= 10^8 0 <= k <= 2 * 10^8</br>\n- xi < xj for all 1 <= i < j <= points.length</br>\n- xi form a strictly increasing sequence.",
    "title": "Max Value of Equation",
    "default_testcase": {
        "id": 3049,
        "input": "3\n0 0\n3 0\n9 2\n3",
        "expected_output": "3",
        "code_problem_id": 440,
        "created_at": "2023-12-21T15:24:42.138Z",
        "updated_at": "2023-12-21T15:24:42.138Z"
    },
    "problem_type": "practice",
    "code_skeletons": [
        {
            "id": 1246,
            "code_problem_id": 440,
            "language": {
                "id": 39,
                "name": "Python (3.8.1)",
                "judge0_language_id": 71
            },
            "skeleton_define_class": null,
            "skeleton_class_end": null,
            "skeleton_solution_class": "class Solution:\n    def find_max_value_of_equation(self, points, k):"
        },
        {
            "id": 1247,
            "code_problem_id": 440,
            "language": {
                "id": 25,
                "name": "Java (OpenJDK 13.0.1)",
                "judge0_language_id": 62
            },
            "skeleton_define_class": null,
            "skeleton_class_end": null,
            "skeleton_solution_class": "class Solution {\n    public int findMaxValueOfEquation(List<List<Integer>> points, int k) {\n    }\n}\n"
        },
        {
            "id": 1248,
            "code_problem_id": 440,
            "language": {
                "id": 11,
                "name": "C++ (GCC 9.2.0)",
                "judge0_language_id": 54
            },
            "skeleton_define_class": null,
            "skeleton_class_end": null,
            "skeleton_solution_class": "class Solution {\npublic:\n    int findMaxValueOfEquation(vector<vector<int>>& points, int k) {\n    }\n};\n"
        },
        {
            "id": 1403,
            "code_problem_id": 440,
            "language": {
                "id": 26,
                "name": "JavaScript (Node.js 12.14.0)",
                "judge0_language_id": 63
            },
            "skeleton_define_class": null,
            "skeleton_class_end": null,
            "skeleton_solution_class": "class Solution {\n    findMaxValueOfEquation(points, k) {\n      \n    }\n}\n"
        }
    ]
}