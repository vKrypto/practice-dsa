{
    "id": 981,
    "description": "You are given an array of meetings, each represented by letters A to Z, and a cooling time, n. Each cycle or interval allows the completion of one meeting. Meetings can be scheduled in any order, but there's a constraint: identical meetings must be separated by at least n intervals due to cooling time.\n\nReturn the minimum number of intervals required to schedule all meetings.\n\n**Input Format:**</br>\nThe first line contains an integer n, representing the number of meetings.</br>\nThe next n lines each contain a single uppercase English letter representing a meeting.</br>\nThe last line contains an integer n, representing the cooling time.\n\n**Output Format**</br>\nPrint a single integer representing the minimum number of intervals required to schedule all meetings with the specified cooling time.\n\n**Example 1:**</br>\n**Input:**\n```\n6\nA A A B B B\n2\n```\n**Output**:\n```\n8\n```\n**Explanation:**\n```\nA possible sequence is: A -> B -> idle -> A -> B -> idle -> A -> B.\nAfter scheduling meeting A, you must wait two cycles before scheduling A again. The same applies to meeting B. In the 3rd interval, neither A nor B can be scheduled, so you idle. By the 4th cycle, you can schedule A again as 2 intervals have passed.\n```\n**Example 2:**</br>\n**Input:**\n```\n6\nA C A B D B\n1\n```\n**Output**:\n```\n6\n```\n**Explanation:**\n```\nA possible sequence is: A -> B -> C -> D -> A -> B.\nWith a cooling interval of 1, you can schedule a meeting after just one other meeting.\n```\n**Constraints**:\n```\n1 <= meetings.length <= 104\nmeetings[i] is an uppercase English letter.\n```",
    "title": "Optimal Meeting Scheduler",
    "default_testcase": {
        "id": 8614,
        "input": "6\nA A A B B B\n2",
        "expected_output": "8\n",
        "code_problem_id": 981,
        "created_at": "2024-06-17T11:44:08.311Z",
        "updated_at": "2024-06-17T11:44:08.311Z"
    },
    "problem_type": "practice",
    "code_skeletons": [
        {
            "id": 3280,
            "code_problem_id": 981,
            "language": {
                "id": 11,
                "name": "C++ (GCC 9.2.0)",
                "judge0_language_id": 54
            },
            "skeleton_define_class": "\nclass Solution {\npublic:\n    int leastInterval(vector<char>& meetings, int n) {\n      ",
            "skeleton_class_end": "}\n};",
            "skeleton_solution_class": ""
        },
        {
            "id": 3281,
            "code_problem_id": 981,
            "language": {
                "id": 25,
                "name": "Java (OpenJDK 13.0.1)",
                "judge0_language_id": 62
            },
            "skeleton_define_class": "\nclass Solution {\n    public int leastInterval(char[] meetings, int n) {\n      \n    ",
            "skeleton_class_end": "}\n}",
            "skeleton_solution_class": ""
        },
        {
            "id": 3282,
            "code_problem_id": 981,
            "language": {
                "id": 26,
                "name": "JavaScript (Node.js 12.14.0)",
                "judge0_language_id": 63
            },
            "skeleton_define_class": "class Solution {\n    leastInterval(meetings, n) {\n      \n    ",
            "skeleton_class_end": "}\n}",
            "skeleton_solution_class": ""
        },
        {
            "id": 3283,
            "code_problem_id": 981,
            "language": {
                "id": 39,
                "name": "Python (3.8.1)",
                "judge0_language_id": 71
            },
            "skeleton_define_class": "\nclass Solution:\n    def leastInterval(self, meetings, n):\n        ",
            "skeleton_class_end": "",
            "skeleton_solution_class": ""
        }
    ]
}