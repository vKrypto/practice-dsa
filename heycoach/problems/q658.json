{
    "id": 658,
    "description": "You have given an array arr consisting of **n** ==non-negative== intergers and an integer **k**. You have to find the good subarray, a good subarray is a ==non-empty== subarray whose sum equals to k. You have to return the starting and ending indexes ==(0-based indexing)== of the good subarray. If there are multiple good subarrays return the subarray whose left Index comes first and then also if there are multiple answers then return the subarray with leftmost ending index. If there is no good subarray then return the array with one element that is **-1**.\n\n\n### Example 1 \n\n### Input\n```CPP\narr = [3,5,2,6,1,4], k = 13\n``` \n### Output \n```CPP \n[1,3]\n``` \n#### Explanation:\n\nsubarray [1,3] have a sum of 13 so it is a good subarray.\n**Note** : subarray [2,5] also has sum 13 but as 1 < 2 so [1,3] will be our answer.\n\n\n### Example 2 \n\n### Input\n```CPP\n arr = [3,2,5,7,8], k = 0\n``` \n### Output \n```CPP \n[-1]\n``` \n#### Explanation:\n\nAs there are no subarray whose sum equals to 0 so we return [-1]. \n\n### Constraints:\n\n* 1 <= n= 10000\n* 0 <= arr[i] <= 100000\n* 0 <= k <= 1000000000\n\n\n\n",
    "title": "Find the good subarray",
    "default_testcase": {
        "id": 4360,
        "input": "6 13\n3 5 2 6 1 4 ",
        "expected_output": "1 3 ",
        "code_problem_id": 658,
        "created_at": "2024-01-27T12:49:50.511Z",
        "updated_at": "2024-01-27T12:49:50.511Z"
    },
    "problem_type": "practice",
    "code_skeletons": [
        {
            "id": 2028,
            "code_problem_id": 658,
            "language": {
                "id": 11,
                "name": "C++ (GCC 9.2.0)",
                "judge0_language_id": 54
            },
            "skeleton_define_class": "class Solution\n{\npublic:\n\tvector<int> findGoodSubarray(vector<int> &arr, int k) {",
            "skeleton_class_end": "}\n};",
            "skeleton_solution_class": ""
        },
        {
            "id": 2030,
            "code_problem_id": 658,
            "language": {
                "id": 25,
                "name": "Java (OpenJDK 13.0.1)",
                "judge0_language_id": 62
            },
            "skeleton_define_class": "class Solution {\n    public List<Integer> findGoodSubarray(int[] arr, int k) {",
            "skeleton_class_end": "   }\n}",
            "skeleton_solution_class": ""
        },
        {
            "id": 2031,
            "code_problem_id": 658,
            "language": {
                "id": 39,
                "name": "Python (3.8.1)",
                "judge0_language_id": 71
            },
            "skeleton_define_class": "class Solution:\n    def findGoodSubarray(self, arr, k):",
            "skeleton_class_end": "",
            "skeleton_solution_class": ""
        },
        {
            "id": 2032,
            "code_problem_id": 658,
            "language": {
                "id": 26,
                "name": "JavaScript (Node.js 12.14.0)",
                "judge0_language_id": 63
            },
            "skeleton_define_class": "class Solution {\n    findGoodSubarray(arr, k) {",
            "skeleton_class_end": "  }\n}",
            "skeleton_solution_class": ""
        }
    ]
}