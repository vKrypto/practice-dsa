{
    "id": 24,
    "description": "Given a binary string s, you can split s into 3 `non-empty` strings s1, s2, and s3 where s1 + s2 + s3 = s.\n\nReturn the number of ways s can be split such that the number of ones is the same in s1, s2, and s3. Since the answer may be too large, return it modulo `10^9 + 7`.\n\n### Example 1 \n\n### Input\n```CPP\n Input: s = \"10101\"\n``` \n### Output \n```CPP \n4\n``` \n#### Explanation -\nThere are four ways to split s in 3 parts where each part contain the same number of letters '1'.\n\n\"1|010|1\"\n\n\"1|01|01\"\n\n\"10|10|1\"\n\n\"10|1|01\"\n\n\n### Example 2 \n\n### Input\n```CPP\ns = \"0000\"\n``` \n### Output \n```CPP \n3\n``` \n#### Explanation -\n There are three ways to split s in 3 parts.\n\n\"0|0|00\"\n\n\"0|00|0\"\n\n\"00|0|0\"\n\n\n\n### Constraints:\n\n* 3 <= s.length <= 10^5\n* s[i] is either '0' or '1'.\n",
    "title": "Split the String",
    "default_testcase": null,
    "problem_type": "practice",
    "code_skeletons": [
        {
            "id": 302,
            "code_problem_id": 24,
            "language": {
                "id": 11,
                "name": "C++ (GCC 9.2.0)",
                "judge0_language_id": 54
            },
            "skeleton_define_class": null,
            "skeleton_class_end": null,
            "skeleton_solution_class": "\nclass Solution {\npublic:\n  void solve(string s) {\n    \n  } \n};\n"
        },
        {
            "id": 306,
            "code_problem_id": 24,
            "language": {
                "id": 25,
                "name": "Java (OpenJDK 13.0.1)",
                "judge0_language_id": 62
            },
            "skeleton_define_class": null,
            "skeleton_class_end": null,
            "skeleton_solution_class": "\npublic class Solution {\n    public void solve(String s) {\n        // your code here\n    }\n}\n"
        },
        {
            "id": 310,
            "code_problem_id": 24,
            "language": {
                "id": 39,
                "name": "Python (3.8.1)",
                "judge0_language_id": 71
            },
            "skeleton_define_class": null,
            "skeleton_class_end": null,
            "skeleton_solution_class": "class Solution:\n    def solve(self, s):\n        # your code here\n"
        }
    ]
}