{
    "id": 140,
    "description": "Brijesh wants to play with numbers. He has crazy thinking he want to find the 132 pattern. Given an array of n integers nums, a **132 pattern** is a subsequence of three integers ***nums[i], nums[j] and nums[k]*** such that *i < j < k* and *nums[i] < nums[k] < nums[j]*.\n\nPrint *true* if there is a **132 pattern** in **nums**, otherwise, print **false**.\n\n#### Input Format:\n- first line contains single integer n (size of the array)\n-  second line contains n integers (element of the array)\n\n#### Output Format:\n- Print true or false (in lowercase only).\n\n#### Constraints:\n- 1 <= n <= 2 * 10^5\n- (-10^9) <= nums[i] <= (10^9)\n\n#### Example:\n**Input** : 4\n3 1 4 2\n**Output**: true",
    "title": "132 Pattern",
    "default_testcase": null,
    "problem_type": "practice",
    "code_skeletons": [
        {
            "id": 175,
            "code_problem_id": 140,
            "language": {
                "id": 11,
                "name": "C++ (GCC 9.2.0)",
                "judge0_language_id": 54
            },
            "skeleton_define_class": null,
            "skeleton_class_end": null,
            "skeleton_solution_class": "class Solution {\npublic:\n  void solve(vector<int> &arr) {\n    \n  } \n};\n\n"
        },
        {
            "id": 177,
            "code_problem_id": 140,
            "language": {
                "id": 25,
                "name": "Java (OpenJDK 13.0.1)",
                "judge0_language_id": 62
            },
            "skeleton_define_class": null,
            "skeleton_class_end": null,
            "skeleton_solution_class": "class Solution {\n  public void solve(Vector<Integer> arr) {\n    \n  } \n}\n\n"
        },
        {
            "id": 185,
            "code_problem_id": 140,
            "language": {
                "id": 39,
                "name": "Python (3.8.1)",
                "judge0_language_id": 71
            },
            "skeleton_define_class": null,
            "skeleton_class_end": null,
            "skeleton_solution_class": "class Solution:\n    def solve(self, arr):\n        pass\n"
        }
    ]
}