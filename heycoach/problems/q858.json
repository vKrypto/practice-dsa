{
    "id": 858,
    "description": "Valerian found himself captured by Shapur after a resounding victory, prompting Shapur to immortalize his triumph by carving a scene of Valerian's defeat onto a mountain. To ensure the most impactful placement, Shapur resolved to survey all n cities of Persia for the ideal mountain. However, weary from the recent war, he sought the shortest route to visit each of the n cities at least once, minimizing his travels. Persian cities are interconnected by bidirectional roads, facilitating travel between any two cities with a unique path. Beginning from city 1, Shapur aimed to visit all other cities with the least possible distance traveled. He could conclude his journey in any city. Assist Shapur in determining the total distance he must traverse\n\n\n\n`Input`:\n\nFirst line contains a single natural number n (1\u2009\u2264\u2009n\u2009\u2264\u200910^5) \u2014 the amount of cities.\nNext n\u2009-\u20091 lines contain 3 integer numbers each xi, yi and wi (1\u2009\u2264\u2009xi,\u2009yi\u2009\u2264\u2009n,\u20090\u2009\u2264\u2009wi\u2009\u2264\u200910^4). xi and yi are two ends of a road and wi is the length of that road.\n\n\n`Output`:\n\nA single integer number, the minimal length of Shapur's travel.\n\n```\nSample Input - 1\n\n5\n1 2 97\n1 3 14\n3 5 60\n4 3 63\n\nSample Output - 1\n\n371\n```\n\nExplanation: We can travel in the following way to acheive the minimal distance, 1->3->4->3->5->3->1->2 which would sum the distances as follows, 14 + 63 + 63 + 60 + 60 + 14 + 97 = 371, which is the minimum possible distance that needs to be travelled.\n\n```\nSample Input - 1\n\n3\n\n1 2 3\n\n2 3 5\n\nSample Output\n\n8\n```",
    "title": "Shapur's Quest for the Perfect Mountain",
    "default_testcase": {
        "id": 7597,
        "input": "5\n5 3 60\n4 3 63\n2 1 97\n3 1 14",
        "expected_output": "371",
        "code_problem_id": 858,
        "created_at": "2024-04-28T14:15:58.655Z",
        "updated_at": "2024-04-28T14:15:58.655Z"
    },
    "problem_type": "practice",
    "code_skeletons": [
        {
            "id": 2827,
            "code_problem_id": 858,
            "language": {
                "id": 11,
                "name": "C++ (GCC 9.2.0)",
                "judge0_language_id": 54
            },
            "skeleton_define_class": "class TreeDistanceCalculator {\npublic:\n    long long calculateMaximumDistance(int n, vector<pair<int, pair<int, int>>>& edges) {",
            "skeleton_class_end": "}\n};",
            "skeleton_solution_class": ""
        },
        {
            "id": 2828,
            "code_problem_id": 858,
            "language": {
                "id": 39,
                "name": "Python (3.8.1)",
                "judge0_language_id": 71
            },
            "skeleton_define_class": "class TreeDistanceCalculator:\n    def calculate_maximum_distance(self, n, edges):",
            "skeleton_class_end": "",
            "skeleton_solution_class": ""
        },
        {
            "id": 2829,
            "code_problem_id": 858,
            "language": {
                "id": 25,
                "name": "Java (OpenJDK 13.0.1)",
                "judge0_language_id": 62
            },
            "skeleton_define_class": "class Solution {\n    public long calculateMaximumDistance(int n, List<Map.Entry<Integer, Map.Entry<Integer, Integer>>> edges) {",
            "skeleton_class_end": "}\n}",
            "skeleton_solution_class": ""
        },
        {
            "id": 2830,
            "code_problem_id": 858,
            "language": {
                "id": 26,
                "name": "JavaScript (Node.js 12.14.0)",
                "judge0_language_id": 63
            },
            "skeleton_define_class": "class Solution {\n    calculateMaximumDistance(n, edges) {",
            "skeleton_class_end": "}\n}",
            "skeleton_solution_class": ""
        }
    ]
}