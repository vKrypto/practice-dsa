{
    "id": 152,
    "description": "You are given an m x n integer matrix grid, where you can move from a cell to any adjacent cell in all 4 directions.\n\nReturn the number of `strictly increasing` paths in the grid such that you can start from any cell and end at any cell. Since the answer may be very large, return it `modulo` 109 + 7.\n\nTwo paths are considered different if they do not have exactly the same sequence of visited cells.\n\n### Example 1 \n![image](https://assets.leetcode.com/uploads/2022/05/10/griddrawio-4.png)\n### Input\n```CPP\ngrid = [[1,1],[3,4]]\n``` \n### Output \n```CPP \n8\n``` \n#### Explanation:\nThe strictly increasing paths are:\n- Paths with length 1: [1], [1], [3], [4].\n- Paths with length 2: [1 -> 3], [1 -> 4], [3 -> 4].\n- Paths with length 3: [1 -> 3 -> 4].\nThe total number of paths is 4 + 3 + 1 = 8.\n\n\n\n\n### Example 2 \n\n### Input\n```CPP\ngrid = [[1],[2]]\n``` \n### Output \n```CPP \n3\n``` \n#### Explanation:\n The strictly increasing paths are:\n- Paths with length 1: [1], [2].\n- Paths with length 2: [1 -> 2].\nThe total number of paths is 2 + 1 = 3.\n\n### Constraints:\n\n* m == grid.length\n* n == grid[i].length\n* 1 <= m, n <= 1000\n* 1 <= m * n <= 10^5\n* 1 <= grid[i][j] <= 10^5\n\n\n",
    "title": "Incresing Sum",
    "default_testcase": null,
    "problem_type": "practice",
    "code_skeletons": [
        {
            "id": 354,
            "code_problem_id": 152,
            "language": {
                "id": 11,
                "name": "C++ (GCC 9.2.0)",
                "judge0_language_id": 54
            },
            "skeleton_define_class": null,
            "skeleton_class_end": null,
            "skeleton_solution_class": "\nclass Solution {\npublic:\n\tvoid solve(vector<vector<int>> arr) {\n\n\t}\n};\n"
        },
        {
            "id": 358,
            "code_problem_id": 152,
            "language": {
                "id": 25,
                "name": "Java (OpenJDK 13.0.1)",
                "judge0_language_id": 62
            },
            "skeleton_define_class": null,
            "skeleton_class_end": null,
            "skeleton_solution_class": "\npublic class Solution {\n    public void solve(Vector<Vector<Integer>> arr) {\n        // your code here\n    }\n}\n"
        },
        {
            "id": 362,
            "code_problem_id": 152,
            "language": {
                "id": 39,
                "name": "Python (3.8.1)",
                "judge0_language_id": 71
            },
            "skeleton_define_class": null,
            "skeleton_class_end": null,
            "skeleton_solution_class": "class Solution:\n    def solve(self, arr):\n        # your code here\n"
        }
    ]
}