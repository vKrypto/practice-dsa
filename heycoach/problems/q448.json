{
    "id": 448,
    "description": "Given the root of a binary tree, return the length of the diameter of the tree.\n\nThe diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the root.\n\nThe length of a path between two nodes is represented by the number of edges between them.\n\n\n----------\n\n\n**`Input`** :\n\n `[ 1 2 3 4 5 -1 -1 -1 -1 -1 -1] `\n\n**`Output:`**        \n   `3`\n```\n        1\n       / \\\n      2   3\n     / \\\n    4   5\n```\n\n**`Input:`**\n\n `[10 5 20 3 7 -1 25 -1 -1 -1 -1 -1 -1] ` \n\n **`Output:`**  \n`4`     \n```\n         10\n        /  \\\n       5    20\n      / \\     \\\n     3   7     25\n```\n\n\n----------\n\n\n**`Constraints:`**</br>\n- `The number of nodes in the tree is in the range [1, 3 * 10^4].`  </br>\n- `1 <= Node.val <= 1000`",
    "title": "Diameter of Binary Tree",
    "default_testcase": {
        "id": 5725,
        "input": "1 2 3 4 5 -1 -1 -1 -1 -1 -1",
        "expected_output": "3",
        "code_problem_id": 448,
        "created_at": "2024-02-17T09:48:21.945Z",
        "updated_at": "2024-02-17T09:48:21.945Z"
    },
    "problem_type": "practice",
    "code_skeletons": [
        {
            "id": 1277,
            "code_problem_id": 448,
            "language": {
                "id": 26,
                "name": "JavaScript (Node.js 12.14.0)",
                "judge0_language_id": 63
            },
            "skeleton_define_class": "class Solution {\n    diameterOfBinaryTree(root) {\n      //Write your code here",
            "skeleton_class_end": "   }\n}",
            "skeleton_solution_class": ""
        },
        {
            "id": 1278,
            "code_problem_id": 448,
            "language": {
                "id": 39,
                "name": "Python (3.8.1)",
                "judge0_language_id": 71
            },
            "skeleton_define_class": "\nclass Solution:\n    def diameterOfBinaryTree(self, root):",
            "skeleton_class_end": null,
            "skeleton_solution_class": ""
        },
        {
            "id": 1279,
            "code_problem_id": 448,
            "language": {
                "id": 25,
                "name": "Java (OpenJDK 13.0.1)",
                "judge0_language_id": 62
            },
            "skeleton_define_class": " class Solution {\n  public int diameterOfBinaryTree(TreeNode root) {\n    //Write your code here",
            "skeleton_class_end": "   }\n}",
            "skeleton_solution_class": ""
        },
        {
            "id": 1280,
            "code_problem_id": 448,
            "language": {
                "id": 11,
                "name": "C++ (GCC 9.2.0)",
                "judge0_language_id": 54
            },
            "skeleton_define_class": "class Solution {\n    public:\n     int dfs(TreeNode* root,int &maxi){\n       //Write your code here",
            "skeleton_class_end": "    }\n};",
            "skeleton_solution_class": ""
        }
    ]
}