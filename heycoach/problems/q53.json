{
    "id": 53,
    "description": "Given a 2D integer array matrix, return the **transpose** of matrix.\n\nThe **transpose** of a matrix is the matrix flipped over its main diagonal, switching the matrix's row and column indices.\n\n#### Input Format:\n- first line contains n, m (size of row and column respectively) of the matrix.\n- next n lines contains m elements each.\n\n#### Output Format: \n- print the transpose matrix\n\n#### Constraints:\n\n- 1 <= m, n <= 1000\n- 1 <= m * n <= 105\n- (-109 )<= matrix[i][j] <= (109)\n\n#### Example:\n```Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]\n```Output: [[1,4,7],[2,5,8],[3,6,9]]",
    "title": "Matrix Transpose",
    "default_testcase": {
        "id": 354,
        "input": "3 3\n1 2 3\n4 5 6\n7 8 9",
        "expected_output": "1 4 7 \n2 5 8 \n3 6 9 \n",
        "code_problem_id": 53,
        "created_at": "2022-09-27T18:20:56.122Z",
        "updated_at": "2022-09-27T18:20:56.122Z"
    },
    "problem_type": "practice",
    "code_skeletons": [
        {
            "id": 49,
            "code_problem_id": 53,
            "language": {
                "id": 11,
                "name": "C++ (GCC 9.2.0)",
                "judge0_language_id": 54
            },
            "skeleton_define_class": null,
            "skeleton_class_end": null,
            "skeleton_solution_class": "class Solution {\npublic:\n\tvoid solve(vector<vector<int>>grid) {\n\t\t\n\t}\n};\n"
        },
        {
            "id": 50,
            "code_problem_id": 53,
            "language": {
                "id": 25,
                "name": "Java (OpenJDK 13.0.1)",
                "judge0_language_id": 62
            },
            "skeleton_define_class": null,
            "skeleton_class_end": null,
            "skeleton_solution_class": "class Solution {\n    public void solve(Vector<Vector<Integer>> grid) {\n\n    }\n}\n\n"
        },
        {
            "id": 51,
            "code_problem_id": 53,
            "language": {
                "id": 39,
                "name": "Python (3.8.1)",
                "judge0_language_id": 71
            },
            "skeleton_define_class": null,
            "skeleton_class_end": null,
            "skeleton_solution_class": "class Solution:\n    def solve(self, grid):\n        pass\n"
        }
    ]
}