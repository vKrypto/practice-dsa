{
    "id": 685,
    "description": "Given an array `arr` consisting of N integers, where the ith element represents the range of a sprinkler i.e [i-arr[i], i+arr[i]] it can water, the task is to find the minimum number of the sprinkler to be turned on to water every plant at the gallery. If it is not possible to water every plant, then print -1.\nYou have to cover all sprinkler from index 0 to N-1;\n\n### Example 1 \n\n### Input\n```CPP\na[] = {1, 2, 1}\n``` \n### Output \n```CPP \n1\n``` \n### Explanation \nFor position 1: a[1] = 1, range = 1 to 2\nFor position 2: a[2] = 2, range = 1 to 3\nFor position 3: a[3] = 1, range = 2 to 3\nTherefore, the fountain at position a[2] covers\nthe whole garden. Therefore, the required output is 1.\n\n\n### Example 2 \n\n### Input\n```CPP\na[] = {2, 1, 1, 2, 1}\n``` \n### Output \n```CPP \n2\n``` \n### Explanation \nFor position 1: a[1] = 2, range = 1 to 3\nFor position 2: a[2] = 1, range = 1 to 3\nFor position 3: a[3] = 1, range = 2 to 4\nFor position 3: a[4] = 2, range = 2 to 5\nFor position 3: a[5] = 1, range = 4 to 5\nTherefore, the fountain at position a[1] and a[4] covers the whole garden. Therefore, the required output is 2. Also possible answer is a[2] and a[4].\n\n\n\n\n\n\n### Constraints:\n\n* 1 <= N <= 2*10^5\n* 1 <= arr[i] <= 10^9\n",
    "title": "Minimum number of sprinklers",
    "default_testcase": {
        "id": 4510,
        "input": "8\n 9644874 35412 41254 96548 265 236 9845 425",
        "expected_output": "1",
        "code_problem_id": 685,
        "created_at": "2024-01-28T01:06:38.958Z",
        "updated_at": "2024-01-28T01:06:38.958Z"
    },
    "problem_type": "practice",
    "code_skeletons": [
        {
            "id": 2140,
            "code_problem_id": 685,
            "language": {
                "id": 11,
                "name": "C++ (GCC 9.2.0)",
                "judge0_language_id": 54
            },
            "skeleton_define_class": "class Solution {\n  public:\n    int minSprinkler(vector < int > & arr) {\n\n",
            "skeleton_class_end": "    }\n};",
            "skeleton_solution_class": ""
        },
        {
            "id": 2141,
            "code_problem_id": 685,
            "language": {
                "id": 25,
                "name": "Java (OpenJDK 13.0.1)",
                "judge0_language_id": 62
            },
            "skeleton_define_class": "\nclass Solution {\n    public int minSprinkler(int[] arr) {\n\n",
            "skeleton_class_end": "    }\n}\n",
            "skeleton_solution_class": ""
        },
        {
            "id": 2142,
            "code_problem_id": 685,
            "language": {
                "id": 39,
                "name": "Python (3.8.1)",
                "judge0_language_id": 71
            },
            "skeleton_define_class": "class Solution:\n    def minSprinkler(self, arr):\n",
            "skeleton_class_end": "",
            "skeleton_solution_class": ""
        },
        {
            "id": 2143,
            "code_problem_id": 685,
            "language": {
                "id": 26,
                "name": "JavaScript (Node.js 12.14.0)",
                "judge0_language_id": 63
            },
            "skeleton_define_class": "class Solution {\n    minSprinkler(arr) {\n\n",
            "skeleton_class_end": "    }\n}\n",
            "skeleton_solution_class": ""
        }
    ]
}