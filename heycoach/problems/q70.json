{
    "id": 70,
    "description": "A rectangular chocolate of Height **N** and width **M** is given. The task is to break this chocolate into M * N squares such that cost of breaking is **minimum**. The cutting cost for each edge will be given for the chocolate in two arrays X[] and Y[]. In short, you need to choose such a sequence of cutting such that cost is minimized. Return the minimized cost.\nHere X[i] means cost of cutting the right edge of ith column,similarly Y[i] means cost of cutting the bottom edge of the ith row.\n\n### Example 1 \n\n### Input\n```CPP\nM = 6, N = 4\nX = [2, 1, 3, 1, 4]\nY = [4, 1, 2]\n``` \n### Output \n```CPP \n42\n``` \n#### Explanation:\nFor above board optimal way to cut into square is:\nTotal minimum cost in above case is 42. It is \nevaluated using following steps.\nInitial Value : Total_cost = 0\nTotal_cost = Total_cost + edge_cost * total_pieces\nCost 4 Horizontal cut:      Cost = 0 + 4\\*1 = 4\nCost 4 Vertical cut:        Cost = 4 + 4\\*2 = 12\nCost 3 Vertical cut:        Cost = 12 + 3\\*2 = 18\nCost 2 Horizontal cut:      Cost = 18 + 2\\*3 = 24\nCost 2 Vertical cut:        Cost = 24 + 2\\*3 = 30\nCost 1 Horizontal cut:      Cost = 30 + 1\\*4 = 34\nCost 1 Vertical cut:        Cost = 34 + 1\\*4 = 38\nCost 1 Vertical cut:        Cost = 38 + 1\\*4 = 42\n### Example 2 \n\n### Input\n```CPP\nM = 4, N = 4\nX = [1, 1, 1]\nY = [1, 1, 1]\n``` \n### Output \n```CPP \n15\n``` \n#### Explanation:\nFor above board optimal way to cut into square is:\nTotal minimum cost in above case is 15.\nIt is evaluated using following steps.\nInitial Value : \nTotal_cost = 0 Total_cost = Total_cost + edge_cost * total_pieces\nCost 1 Horizontal cut: Cost = 0 + 1\\*1 = 1\nCost 1 Horizontal cut: Cost = 1 + 1\\*1 = 2\nCost 1 Horizontal cut: Cost = 2 + 1\\*1 = 3\nCost 1 Vertical cut:   Cost = 3 + 1\\*3 = 6\nCost 1 Vertical cut:   Cost = 6 + 1\\*3 = 9\nCost 1 Vertical cut: Cost = 9 + 1\\*3 = 12\nCost 1 Vertical cut:   Cost = 12 + 1\\*3 = 15\n### Constraints:\n\n* 1 <= M,N <= 1000\n* X.length == M - 1\n* Y.length == N - 1\n* 1 <= X[i],Y[i] <= 1000\n",
    "title": "Minimum cost to cut a rectangular chocolate into single pieces",
    "default_testcase": {
        "id": 488,
        "input": "6 4\n2 1 3 1 4\n4 1 2",
        "expected_output": "42\n",
        "code_problem_id": 70,
        "created_at": "2022-09-30T11:58:06.645Z",
        "updated_at": "2022-09-30T11:58:06.645Z"
    },
    "problem_type": "practice",
    "code_skeletons": [
        {
            "id": 113,
            "code_problem_id": 70,
            "language": {
                "id": 11,
                "name": "C++ (GCC 9.2.0)",
                "judge0_language_id": 54
            },
            "skeleton_define_class": null,
            "skeleton_class_end": null,
            "skeleton_solution_class": "class Solution {\npublic:\n\tint minimumCostOfBreaking(vector<int> X, vector<int> Y, int M, int N) {\n      // write your code here\n\t}\n};"
        },
        {
            "id": 482,
            "code_problem_id": 70,
            "language": {
                "id": 25,
                "name": "Java (OpenJDK 13.0.1)",
                "judge0_language_id": 62
            },
            "skeleton_define_class": null,
            "skeleton_class_end": null,
            "skeleton_solution_class": "class Solution {\n    public int minimumCostOfBreaking(List<Integer> X, List<Integer> Y, int M, int N) {\n      // write your code here\n    }\n}"
        }
    ]
}