{
    "id": 614,
    "description": "You are given two non-empty linked lists representing two non-negative integers. The most significant digit comes first, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.\n\nYou may assume the two numbers do not contain any leading zero, except the number 0 itself.\n\n### `Input:`\n\n```\nTwo linked lists, l1 and l2, representing two non-negative integers.\nEach linked list is represented by its head.\nThe number of nodes in each linked list is in the range [1, 100].\nThe value of each node is in the range [0, 9].\n```\n\n### `Output:`\n\n`Return a linked list representing the sum of the two numbers.`\n\n \n#### `Sample Input`\n```\nl1 = [7,2,4,3]\nl2 = [5,6,4]\n```\n\n#### `Sample Output`\n```\n[7,8,0,7]\n```\n\n### `Constraints:`\n\n- `The number of nodes in each linked list is in the range [1, 100].`\n- `0 <= Node.val <= 9.`  \n- `It is guaranteed that the list represents a number that does not have leading zeros.`",
    "title": "Linked List Addition",
    "default_testcase": {
        "id": 4000,
        "input": "5\n1 2 3 4 5\n5 \n1 2 3 4 5",
        "expected_output": "2 4 6 9 0 ",
        "code_problem_id": 614,
        "created_at": "2024-01-22T16:58:38.119Z",
        "updated_at": "2024-01-22T16:58:38.119Z"
    },
    "problem_type": "practice",
    "code_skeletons": [
        {
            "id": 1849,
            "code_problem_id": 614,
            "language": {
                "id": 11,
                "name": "C++ (GCC 9.2.0)",
                "judge0_language_id": 54
            },
            "skeleton_define_class": "class Solution {\npublic:\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {",
            "skeleton_class_end": "}\n};",
            "skeleton_solution_class": ""
        },
        {
            "id": 1850,
            "code_problem_id": 614,
            "language": {
                "id": 25,
                "name": "Java (OpenJDK 13.0.1)",
                "judge0_language_id": 62
            },
            "skeleton_define_class": "class Solution {\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {",
            "skeleton_class_end": "}\n}",
            "skeleton_solution_class": ""
        },
        {
            "id": 1851,
            "code_problem_id": 614,
            "language": {
                "id": 39,
                "name": "Python (3.8.1)",
                "judge0_language_id": 71
            },
            "skeleton_define_class": "class Solution:\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:",
            "skeleton_class_end": "",
            "skeleton_solution_class": ""
        },
        {
            "id": 1852,
            "code_problem_id": 614,
            "language": {
                "id": 26,
                "name": "JavaScript (Node.js 12.14.0)",
                "judge0_language_id": 63
            },
            "skeleton_define_class": "const addTwoNumbers = function(l1, l2) {",
            "skeleton_class_end": "};",
            "skeleton_solution_class": ""
        }
    ]
}