{
    "id": 738,
    "description": "You are in a jungle which can be seen as a matrix of size n x m. At each of the cell there is a special type of environment like there could be a quick sand, a pack of wolves or a tree of berries and fruits. So each cell could either make you lose \"exp\" or help you gain \"exp\" (exp stands for experience). Your goal is to reach the cell at nth row and mth column. Initially let us say you start with exp \"X\".</br>\n\nReturn the minimum possible value of X required to cross the jungle and come out with a positive exp.\n\n#### Input Format:\n\n- `Two space-separated integers 'n' and 'm' denoting the number of rows and columns.`\n\n- `Next 'n' lines contains 'm' number of integers each denoting the impact on your exp.`\n\n#### Output Format:\n\n- `Return the minimum possible value of X required to cross the jungle come out with a positive exp.`\n\n#### Sample Input:\n```\n2 2\n\n0 1\n\n2 0\n```\n#### Sample Output:\n```\n-1\n```\n#### Explanation: \n- `The player can take the route (0,0) -> (1,0) -> (1,1) and the minimum health that he can start with would be -1.`\n\n- `1<=n,m<=100`",
    "title": "Crossing the jungle",
    "default_testcase": {
        "id": 5435,
        "input": "2 3\n0 1 -3\n1 -2 0",
        "expected_output": "2\n",
        "code_problem_id": 738,
        "created_at": "2024-02-12T21:00:55.876Z",
        "updated_at": "2024-02-12T21:00:55.876Z"
    },
    "problem_type": "practice",
    "code_skeletons": [
        {
            "id": 2361,
            "code_problem_id": 738,
            "language": {
                "id": 11,
                "name": "C++ (GCC 9.2.0)",
                "judge0_language_id": 54
            },
            "skeleton_define_class": "class Solution{\n    public:\n    int solve(int n, int m, int** ar){\n        //Write your code here;",
            "skeleton_class_end": "}\n};",
            "skeleton_solution_class": ""
        },
        {
            "id": 2362,
            "code_problem_id": 738,
            "language": {
                "id": 39,
                "name": "Python (3.8.1)",
                "judge0_language_id": 71
            },
            "skeleton_define_class": "class Solution:\n    def solve(self, n, m, ar):\n      #Write your code here",
            "skeleton_class_end": "",
            "skeleton_solution_class": ""
        },
        {
            "id": 2363,
            "code_problem_id": 738,
            "language": {
                "id": 25,
                "name": "Java (OpenJDK 13.0.1)",
                "judge0_language_id": 62
            },
            "skeleton_define_class": "class Solution {\n    public int solve(int n, int m, int[][] ar) {\n      //Write your code here",
            "skeleton_class_end": "  }\n}",
            "skeleton_solution_class": ""
        },
        {
            "id": 2364,
            "code_problem_id": 738,
            "language": {
                "id": 26,
                "name": "JavaScript (Node.js 12.14.0)",
                "judge0_language_id": 63
            },
            "skeleton_define_class": "class Solution {\n    solve(n, m, ar) {\n      //Write your code here",
            "skeleton_class_end": "}\n}",
            "skeleton_solution_class": ""
        }
    ]
}