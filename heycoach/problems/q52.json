{
    "id": 52,
    "description": "Given an n x n binary matrix image, convert the image as it would in a vertical mirror, then flip the bits, and return the resulting image.\n\nTo flip an image means that each row of the image is reversed.\n\n#### Example:\n##### Input:\n#####  `[1,1,0]`\nOutput:\n\n` [1,0,0].  `\n#### Explanation:\n\nFirst we get the mirror image of it which results in:  [0,1,1].\nThen we flip the bits to get [1,0,0].  \nTo flip the bits means that each 0 is replaced by 1, and each 1 is replaced by 0.\n\n\n#### Input Format:\n\n```\nFirst line contains the n (size of the matrix)\nnext n line contains n elements each\n```\n\n#### Output Format:\n\n`print the nxn matrix with space seperation for example in the example where input [1,1,0] was provided you have to print 1 0 0`\n\n#### Constraints:\nn == image.length  \nn == image[i].length  \n1 <= n <= 20  \nimages[i][j] is either 0 or 1.",
    "title": "Image Flipping",
    "default_testcase": {
        "id": 6140,
        "input": "3\n1 1 0\n1 0 1\n0 0 0",
        "expected_output": "1 0 0\n0 1 0\n1 1 1\n",
        "code_problem_id": 52,
        "created_at": "2024-03-08T09:00:59.505Z",
        "updated_at": "2024-03-08T09:00:59.505Z"
    },
    "problem_type": "level_test",
    "code_skeletons": [
        {
            "id": 58,
            "code_problem_id": 52,
            "language": {
                "id": 11,
                "name": "C++ (GCC 9.2.0)",
                "judge0_language_id": 54
            },
            "skeleton_define_class": "class Solution {\n    public:\n    vector<vector<int>> solve(vector<vector<int>> image){\n      //Write your code here",
            "skeleton_class_end": "    }\n};",
            "skeleton_solution_class": ""
        },
        {
            "id": 59,
            "code_problem_id": 52,
            "language": {
                "id": 25,
                "name": "Java (OpenJDK 13.0.1)",
                "judge0_language_id": 62
            },
            "skeleton_define_class": "class Solution {\n     public int[][] flipAndInvertImage(int[][] image) {",
            "skeleton_class_end": "   }\n}",
            "skeleton_solution_class": ""
        },
        {
            "id": 60,
            "code_problem_id": 52,
            "language": {
                "id": 39,
                "name": "Python (3.8.1)",
                "judge0_language_id": 71
            },
            "skeleton_define_class": "class Solution:\n    def flipAndInvertImage(self, image: List[List[int]]) -> List[List[int]]:",
            "skeleton_class_end": null,
            "skeleton_solution_class": ""
        },
        {
            "id": 607,
            "code_problem_id": 52,
            "language": {
                "id": 26,
                "name": "JavaScript (Node.js 12.14.0)",
                "judge0_language_id": 63
            },
            "skeleton_define_class": "class Solution {\n    flipAndInvertImage (image) {\n      //Write your code here",
            "skeleton_class_end": "    }\n}",
            "skeleton_solution_class": ""
        }
    ]
}