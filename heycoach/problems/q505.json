{
    "id": 505,
    "description": "You are given a list of words and a root node of an already implemented Trie, your task is to check which words are present and which are not, if they are present return true otherwise return false.\n\n**Input Format:**\n```\nFirst line contains an integer representing of the number of words to be checked.\n\nSecond line contains the list of words that are present in trie.\n\nThird line contains a list of words that are to be checked.\n```\n\n\n**Output Format:**\n```\nReturn true if word is present in Trie otherwise false.\n\n```\n\n**Constraints:**\n\n\n`1 <= n <= 1000`\n\n`1 <= word.length <= 100`\n",
    "title": "Searching in Trie",
    "default_testcase": {
        "id": 5396,
        "input": "3\nramesh suresh kamlesh\nronny kamlesh faruq",
        "expected_output": "No\nYes\nNo\n",
        "code_problem_id": 505,
        "created_at": "2024-02-10T09:25:42.749Z",
        "updated_at": "2024-02-10T09:25:42.749Z"
    },
    "problem_type": "session_assignment",
    "code_skeletons": [
        {
            "id": 1490,
            "code_problem_id": 505,
            "language": {
                "id": 26,
                "name": "JavaScript (Node.js 12.14.0)",
                "judge0_language_id": 63
            },
            "skeleton_define_class": "/*\nclass TrieNode {\n    constructor(data) {\n        this.data = data;\n        this.children = new Array(26);\n        this.isend = false;\n        for (let i = 0; i < 26; i++) {\n            this.children[i] = null;\n        }\n    }\n}\n*/\n\nclass Solution {\n    searchword(word, root){\n      //Write your code here",
            "skeleton_class_end": "} \n}",
            "skeleton_solution_class": ""
        },
        {
            "id": 1491,
            "code_problem_id": 505,
            "language": {
                "id": 39,
                "name": "Python (3.8.1)",
                "judge0_language_id": 71
            },
            "skeleton_define_class": "\"\"\"\nclass TrieNode:\n    def __init__(self, data):\n        self.data = data\n        self.children = [None] * 26\n        self.isend = False\n\"\"\"\n\nclass Solution:\n    def searchword(self, word, root):\n      #Write your code here",
            "skeleton_class_end": "",
            "skeleton_solution_class": ""
        },
        {
            "id": 1492,
            "code_problem_id": 505,
            "language": {
                "id": 25,
                "name": "Java (OpenJDK 13.0.1)",
                "judge0_language_id": 62
            },
            "skeleton_define_class": "/*\nclass TrieNode {\n    char data;\n    TrieNode[] children;\n    boolean isend;\n\n    TrieNode(char data) {\n        this.data = data;\n        children = new TrieNode[26];\n        isend = false;\n        for (int i = 0; i < 26; i++) {\n            children[i] = null;\n        }\n    }\n}\n*/\n\nclass Solution {\n    boolean searchword(String word, TrieNode root) {\n      //Write your code here;",
            "skeleton_class_end": "}\n}",
            "skeleton_solution_class": ""
        },
        {
            "id": 1493,
            "code_problem_id": 505,
            "language": {
                "id": 11,
                "name": "C++ (GCC 9.2.0)",
                "judge0_language_id": 54
            },
            "skeleton_define_class": "/*\n  class TrieNode{\n    public:\n    char data;\n    TrieNode**children;\n    bool isend;\n\n    TrieNode(char data){\n        this->data = data;\n        children = new TrieNode*[26];\n        isend = false;\n        for(int i=0;i<26;i++){\n            children[i] = NULL;\n        }\n    }\n};\n*/\n\nclass Solution{\n    public:\n    bool searchWord(string word, TrieNode* root){\n      //Write your code here;",
            "skeleton_class_end": "}\n};",
            "skeleton_solution_class": ""
        }
    ]
}