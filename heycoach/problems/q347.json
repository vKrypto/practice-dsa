{
    "id": 347,
    "description": "Given an `m x n` integer matrix `heights` representing the heights above sea level of cells on an island, determine the cells from which water can flow to both the Pacific and Atlantic oceans. </br>Water can flow to neighbouring cells directly north, south, east, and west if the neighbouring cell's height is less than or equal to the current cell's height. The Pacific Ocean touches the island's left and top edges, and the Atlantic Ocean touches the island's right and bottom edges.\n\n**Input**:\n\n- `heights`: `a 2D list where` `heights[r][c]` `represents the height of the cell at coordinate` `(r, c)`.\n-` The first line contains two integers,` `rows` and `cols`, `indicating the dimensions of the` `heights` `matrix`.\n- `The following ``rows` `lines each contain ``cols` `integers, representing the matrix's cell values.`\n\n**Output**:\n\n- ` A list of coordinates` `[r, c]` `where water can flow from cell` `(r, c)` `to both the Pacific and Atlantic oceans.`\n\n**`Examples`**:\n\n- **Input 1**: \n  ```\n  4 4\n  1 6 2 5\n  3 4 2 1\n  3 5 6 1\n  4 5 2 6\n  ```\n- **Output 1**:\n  ```\n  0 1 \n  0 2 \n  0 3 \n  1 1 \n  1 2 \n  2 1 \n  2 2 \n  3 0 \n  3 1 \n  ```\n\n**Explanation**: </br>`In the given matrix, several cells allow water to flow to both the Pacific (top and left edges) and Atlantic (right and bottom edges) oceans, following the rules defined in the objective.`\n\n**Constraints**:\n\n- `1 <= m, n <= 100`\n- `1 <= heights[r][c] <= 10000`\n- `The matrix heights represents an island with varying cell heights.`\n",
    "title": "Pacific Atlantic Water Flow",
    "default_testcase": {
        "id": 6183,
        "input": "4 4\n1 6 2 5\n3 4 2 1\n3 5 6 1\n4 5 2 6",
        "expected_output": "0 1\n0 2\n0 3\n1 1\n1 2\n2 1\n2 2\n3 0\n3 1\n\n",
        "code_problem_id": 347,
        "created_at": "2024-03-09T06:49:30.497Z",
        "updated_at": "2024-03-09T06:49:30.497Z"
    },
    "problem_type": "session_assignment",
    "code_skeletons": [
        {
            "id": 814,
            "code_problem_id": 347,
            "language": {
                "id": 11,
                "name": "C++ (GCC 9.2.0)",
                "judge0_language_id": 54
            },
            "skeleton_define_class": "class Solution {\npublic:\n    vector<vector<int>> pacificAtlantic(vector<vector<int>>& heights) {\n      //Write your code here\n",
            "skeleton_class_end": "   }\n};",
            "skeleton_solution_class": ""
        },
        {
            "id": 1104,
            "code_problem_id": 347,
            "language": {
                "id": 25,
                "name": "Java (OpenJDK 13.0.1)",
                "judge0_language_id": 62
            },
            "skeleton_define_class": "class Solution {\n    public List<List<Integer>> pacificAtlantic(int[][] heights) {\n      //Write your code here\n        ",
            "skeleton_class_end": "  }\n}",
            "skeleton_solution_class": ""
        },
        {
            "id": 1105,
            "code_problem_id": 347,
            "language": {
                "id": 39,
                "name": "Python (3.8.1)",
                "judge0_language_id": 71
            },
            "skeleton_define_class": "class Solution:\n    def pacificAtlantic(self, heights: List[List[int]]) -> List[List[int]]:\n        # Write your code here\n        #Write your code here\n        ",
            "skeleton_class_end": "",
            "skeleton_solution_class": ""
        },
        {
            "id": 1106,
            "code_problem_id": 347,
            "language": {
                "id": 26,
                "name": "JavaScript (Node.js 12.14.0)",
                "judge0_language_id": 63
            },
            "skeleton_define_class": "class Solution {\n    pacificAtlantic(heights) {\n      ",
            "skeleton_class_end": "}\n}",
            "skeleton_solution_class": ""
        }
    ]
}