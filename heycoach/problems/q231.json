{
    "id": 231,
    "description": "\nGiven an integer array `deck`, where each card has a unique integer, the task is to find a specific sequence to reorder and reveal the cards in increasing order. Initially, the deck is face down, and the following steps are repeated until all cards are revealed:\n\n1. Take the top card of the deck, reveal it, and remove it from the deck.\n2. If there are still cards in the deck, put the next top card at the bottom of the deck.\n3. Repeat steps 1 and 2 until all cards are revealed.\n\nThe goal is to return the ordering of the deck that would reveal the cards in increasing order, starting with the first entry as the top of the deck.\n\n**Input Format:**\n\n- `A single line containing an integer `n`, representing the size of the array `deck`.\n- `The second line contains `n` space-separated integers, the elements of the array `deck`.\n\n**Output Format:**\n\n- `A single line containing the reordered sequence of integers that reveals the cards in increasing order, with each integer separated by a space.`\n\n\n**Sample Input 1:**\n\n```\n7\n17 13 11 2 3 5 7\n```\n\n**Sample Output 1:**\n\n```\n2 13 3 11 5 17 7\n```\n\n**Explanation 1:**\n\n- `The deck is sorted and revealed according to the specified process, which results in the sequence [2,13,3,11,5,17,7], successfully revealing the cards in increasing order.`\n\n**Sample Input 2:**\n\n```\n2\n1 1000\n```\n\n**Sample Output 2:**\n\n```\n1 1000\n```\n\n**Explanation 2:**\n\n- `With only two cards, revealing them in sorted order directly meets the condition.`\n\n\n**Constraints:**\n\n- `1 <= deck.length <= 10000`\n- `1 <= deck[i] <= 10000`\n- `All the values in `deck` are unique.`\n\n",
    "title": "Reveal cards in ascending order",
    "default_testcase": {
        "id": 1648,
        "input": "7\n17 13 11 2 3 5 7",
        "expected_output": "2 13 3 11 5 17 7 ",
        "code_problem_id": 231,
        "created_at": "2022-11-01T17:43:50.399Z",
        "updated_at": "2022-11-01T17:43:50.399Z"
    },
    "problem_type": "level_test",
    "code_skeletons": [
        {
            "id": 330,
            "code_problem_id": 231,
            "language": {
                "id": 11,
                "name": "C++ (GCC 9.2.0)",
                "judge0_language_id": 54
            },
            "skeleton_define_class": "class Solution {\n    public:\n    vector<int> deckRevealedIncreasing(vector<int>& deck) {\n      //Write your code here",
            "skeleton_class_end": "  }\n};",
            "skeleton_solution_class": ""
        },
        {
            "id": 676,
            "code_problem_id": 231,
            "language": {
                "id": 25,
                "name": "Java (OpenJDK 13.0.1)",
                "judge0_language_id": 62
            },
            "skeleton_define_class": "class Solution {\n    public int[] deckRevealedIncreasing(int[] deck) {\n      //Write your code here;",
            "skeleton_class_end": "}\n}",
            "skeleton_solution_class": ""
        },
        {
            "id": 677,
            "code_problem_id": 231,
            "language": {
                "id": 39,
                "name": "Python (3.8.1)",
                "judge0_language_id": 71
            },
            "skeleton_define_class": "class Solution:\n    def deckRevealedIncreasing(self, deck):\n      #Write your code here",
            "skeleton_class_end": null,
            "skeleton_solution_class": ""
        },
        {
            "id": 850,
            "code_problem_id": 231,
            "language": {
                "id": 26,
                "name": "JavaScript (Node.js 12.14.0)",
                "judge0_language_id": 63
            },
            "skeleton_define_class": "class Solution {\n    deckRevealedIncreasing(deck) {\n      //Write your code here",
            "skeleton_class_end": "}\n}",
            "skeleton_solution_class": ""
        }
    ]
}