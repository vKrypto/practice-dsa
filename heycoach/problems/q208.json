{
    "id": 208,
    "description": "\nGiven string num representing a non-negative integer num, and an integer k, return the smallest possible integer after removing k digits from num.\n### Example 1 \n\n### Input\n```CPP\nnum = \"1432219\", k = 3\n``` \n### Output \n```CPP \n\"1219\"\n``` \n### Explanation:\n Remove the three digits 4, 3, and 2 to form the new number 1219 which is the smallest.\n\n### Example 2\n### Input\n```CPP\n num = \"10200\", k = 1\n ```\n### Output \n```CPP \n\"200\"\n``` \n### Explanation:\n Remove the leading 1 and the number is 200. Note that the output must not contain leading zeroes.\n\n\n### Constraints:\n\n* 1 <= k <= num.length <= 10^5\n* num consists of only digits.\n* num does not have any leading zeros except for the zero itself.\n\n\n",
    "title": "Removing Element",
    "default_testcase": null,
    "problem_type": "practice",
    "code_skeletons": [
        {
            "id": 437,
            "code_problem_id": 208,
            "language": {
                "id": 11,
                "name": "C++ (GCC 9.2.0)",
                "judge0_language_id": 54
            },
            "skeleton_define_class": null,
            "skeleton_class_end": null,
            "skeleton_solution_class": "\nclass Solution {\npublic:\n  void solve(string s,int k) {\n    \n  } \n};\n"
        },
        {
            "id": 439,
            "code_problem_id": 208,
            "language": {
                "id": 25,
                "name": "Java (OpenJDK 13.0.1)",
                "judge0_language_id": 62
            },
            "skeleton_define_class": null,
            "skeleton_class_end": null,
            "skeleton_solution_class": "\npublic class Solution {\n    public void solve(String s,int k) {\n        // your code here\n    }\n}"
        },
        {
            "id": 441,
            "code_problem_id": 208,
            "language": {
                "id": 39,
                "name": "Python (3.8.1)",
                "judge0_language_id": 71
            },
            "skeleton_define_class": null,
            "skeleton_class_end": null,
            "skeleton_solution_class": "class Solution:\n    def solve(self, s, k):\n        # your code here\n"
        }
    ]
}