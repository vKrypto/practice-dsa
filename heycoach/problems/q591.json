{
    "id": 591,
    "description": "Design a data structure that works like a LRU Cache. Here cap denotes the capacity of the cache and Q denotes the number of queries. Query can be of two types:\n\nSET x y: sets the value of the key x with value y.  \nGET x: gets the key of x if present else returns -1.\n\nThe LRUCache class has two methods get() and set() which are defined as follows.\n\nget(key): returns the value of the key if it already exists in the cache otherwise returns -1.\nset(key, value): if the key is already present, update its value. If not present, add the key-value pair to the cache. If the cache reaches its capacity it should invalidate the least recently used item before inserting the new item.  \nIn the constructor of the class the capacity of the cache should be initialized.\n \n\n**`Example 1:`**\n\n**`Input:`**  \n\n```\ncap = 2  \nQ = 2  \nQueries = SET 1 2 GET 1  \n```\n\n**`Output:`**<br>` 2`  \n**`Explanation: `**  \n  \n ```\n Cache Size = 2\n\nSET 1 2 : Cache becomes {1=2}. No eviction needed.\n\nGET 1 : Print the value corresponding to Key 1, i.e., 2.\n\n```\n\n",
    "title": "LRU cache",
    "default_testcase": {
        "id": 4130,
        "input": "2 4\nSET 1 2\nSET 2 3\nGET 2\nGET 1",
        "expected_output": "3\n2\n",
        "code_problem_id": 591,
        "created_at": "2024-01-24T16:17:44.329Z",
        "updated_at": "2024-01-24T16:17:44.329Z"
    },
    "problem_type": "practice",
    "code_skeletons": [
        {
            "id": 1884,
            "code_problem_id": 591,
            "language": {
                "id": 26,
                "name": "JavaScript (Node.js 12.14.0)",
                "judge0_language_id": 63
            },
            "skeleton_define_class": "class LRUCache {\n    constructor(capacity) {",
            "skeleton_class_end": "       } \n   } \n}",
            "skeleton_solution_class": ""
        },
        {
            "id": 1885,
            "code_problem_id": 591,
            "language": {
                "id": 39,
                "name": "Python (3.8.1)",
                "judge0_language_id": 71
            },
            "skeleton_define_class": "class LRUCache:\n    def __init__(self, capacity):",
            "skeleton_class_end": "",
            "skeleton_solution_class": ""
        },
        {
            "id": 1886,
            "code_problem_id": 591,
            "language": {
                "id": 11,
                "name": "C++ (GCC 9.2.0)",
                "judge0_language_id": 54
            },
            "skeleton_define_class": "class LRUCache {\n    int capacity;\n    list<pair<int, int>> cacheList;\n    unordered_map<int, list<pair<int, int>>::iterator> cacheMap;\n\npublic:\n    LRUCache(int capacity) : capacity(capacity) {}",
            "skeleton_class_end": "}\n};",
            "skeleton_solution_class": ""
        },
        {
            "id": 1887,
            "code_problem_id": 591,
            "language": {
                "id": 25,
                "name": "Java (OpenJDK 13.0.1)",
                "judge0_language_id": 62
            },
            "skeleton_define_class": "class LRUCache {\n    private final Map<Integer, Node> cache;\n    private final DoublyLinkedList pageList;\n    private final int capacity;\n\n    public LRUCache(int capacity) {\n        this.capacity = capacity;\n        cache = new HashMap<>();\n        pageList = new DoublyLinkedList();\n    }\n\n    public int get(int key) {",
            "skeleton_class_end": "   }\n  }\n}",
            "skeleton_solution_class": ""
        }
    ]
}