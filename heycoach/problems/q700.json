{
    "id": 700,
    "description": "You are given a `0-indexed` integer array nums. In one operation, select any non-negative integer x and an index i, then update nums[i] to be equal to (nums[i] AND (nums[i] XOR x)).\n\nNote that AND is the bitwise AND operation and XOR is the bitwise XOR operation.\n\nReturn the `maximum` possible bitwise XOR of all elements of nums after applying the operation any number of times.\n\n### Example 1 \n\n### Input\n```CPP\nnums = [3,2,4,6]\n``` \n### Output \n```CPP \n7\n``` \n#### Explanation:\nApply the operation with x = 4 and i = 3, num[3] = 6 AND (6 XOR 4) = 6 AND 2 = 2.\nNow, nums = [3, 2, 4, 2] and the bitwise XOR of all the elements = 3 XOR 2 XOR 4 XOR 2 = 7.\nIt can be shown that 7 is the maximum possible bitwise XOR.\nNote that other operations may be used to achieve a bitwise XOR of 7.\n\n\n### Example 2 \n\n### Input\n```CPP\nnums = [1,2,3,9,2]\n``` \n### Output \n```CPP \n11\n``` \n#### Explanation:\nApply the operation zero times.\nThe bitwise XOR of all the elements = 1 XOR 2 XOR 3 XOR 9 XOR 2 = 11.\nIt can be shown that 11 is the maximum possible bitwise XOR. \n\n\n### Constraints:\n\n* 1 <= nums.length <= 10^5\n* 0 <= nums[i] <= 10^8\n\n",
    "title": "Largest XOR",
    "default_testcase": {
        "id": 4589,
        "input": "1\n654",
        "expected_output": "654",
        "code_problem_id": 700,
        "created_at": "2024-01-28T05:37:38.885Z",
        "updated_at": "2024-01-28T05:37:38.885Z"
    },
    "problem_type": "practice",
    "code_skeletons": [
        {
            "id": 2196,
            "code_problem_id": 700,
            "language": {
                "id": 11,
                "name": "C++ (GCC 9.2.0)",
                "judge0_language_id": 54
            },
            "skeleton_define_class": "class Solution {\n  public:\n    int maximumXOR(vector < int > & nums) {",
            "skeleton_class_end": "    }\n};",
            "skeleton_solution_class": ""
        },
        {
            "id": 2197,
            "code_problem_id": 700,
            "language": {
                "id": 25,
                "name": "Java (OpenJDK 13.0.1)",
                "judge0_language_id": 62
            },
            "skeleton_define_class": "class Solution {\n    public int maximumXOR(ArrayList<Integer> nums) {",
            "skeleton_class_end": "   }\n}",
            "skeleton_solution_class": ""
        },
        {
            "id": 2198,
            "code_problem_id": 700,
            "language": {
                "id": 39,
                "name": "Python (3.8.1)",
                "judge0_language_id": 71
            },
            "skeleton_define_class": "class Solution:\n    def maximumXOR(self, nums):",
            "skeleton_class_end": "",
            "skeleton_solution_class": ""
        },
        {
            "id": 2199,
            "code_problem_id": 700,
            "language": {
                "id": 26,
                "name": "JavaScript (Node.js 12.14.0)",
                "judge0_language_id": 63
            },
            "skeleton_define_class": "class Solution {\n  maximumXOR(nums) {",
            "skeleton_class_end": "     }\n}",
            "skeleton_solution_class": ""
        }
    ]
}