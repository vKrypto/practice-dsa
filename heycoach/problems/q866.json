{
    "id": 866,
    "description": "You need to determine if there exists a non-negative integer `x` such that the sequence of the number of `1`s in the binary representations of `x, x+1, ..., x+n-1` matches a given sequence `(a1, a2, ..., an)`. If such an `x` exists, you are to find the smallest such `x`.\n\n**Function Definition:**\n\nLet `p(x)` denote the number of ones (`1`s) in the binary representation of the non-negative integer `x`. For example, `p(26) = 3` because the binary representation of 26 is `11010`, which contains three `1`s.\n\n**Input:**\n\n- The input starts with an integer `t` (1 \u2264 t \u2264 1000), which represents the number of test cases.\n- Each test case begins with an integer `n` (1 \u2264 n \u2264 500,000), indicating the length of the sequence.\n- The next line contains `n` integers, `a1, a2, ..., an` (0 \u2264 ai \u2264 60), representing the target sequence of ones count in binary representations.\n\n**Output:**\n\n- For each test case, print the smallest non-negative integer `x` such that the sequence of ones count in the binary representation for `x` through `x+n-1` matches the given sequence. If no such `x` exists, print `-1`.\n\n**Constraints:**\n\n- The sum of `n` across all test cases does not exceed 500,000.\n\n**Examples:**\n\nInput:\n```\n4\n5\n3 3 4 1 2\n3\n2 1 2\n2\n60 60\n2\n8 0\n```\nOutput:\n```\n13\n2305843009213693949\n-1\n-1\n```\n\n**Explanation:**\n\n- In the first example, the sequence `(p(13), p(14), p(15), p(16), p(17)) = (3, 3, 4, 1, 2)`, which matches the provided sequence. No smaller `x` satisfies the condition.\n- In the second test case, the smallest `x` where `p(x), p(x+1), p(x+2) = (2, 1, 2)` is `2305843009213693949`.\n- In the other cases, no such `x` exists for the given sequences, hence the output is `-1`.\n\n**Task:**\n\nYour task is to implement a method to find the smallest `x` for each test case, or determine if no such `x` exists.\n",
    "title": "Finding Bit Sequence Start",
    "default_testcase": null,
    "problem_type": "practice",
    "code_skeletons": []
}