{
    "id": 794,
    "description": "You are given an integer `n`, an array of positive integers `price` where `price[i]` denotes the price of the ith toffee and a positive integer `k`.\n\nThe store sells jars of `k` **distinct** toffees. The **sweetness** of a toffee jar is the smallest absolute difference of the **prices** of any two toffees in the jar.\n\nReturn the **maximum** *sweetness* of a toffee jar.</br>\n#### `Input Format`\n\n- `1st Line contains a single interger n, size of the price array.`\n- `2nd Line contains the price array, denoting price of ith toffee.`\n- `3rd Line contains a single interger k, denoting the number of disctict toffees in each jar.`\n\n\n#### `Output Format`\n\n`Single Integer denoting the maximum possible sweetness.`\n\n#### `Input:`\n```\nn = 6, price = [13,5,1,8,21,2], k = 3\n```\n#### `Output:`\n`8`\n\n#### `Explanation:\n```\nChoosing the toffees with the prices [13, 5, 21].\nThe sweetness of the toffee jar is: min(|13 - 5|, |13 - 21|, |5 - 21|) = min(8, 8, 16) = 8.\nIt can be proven that 8 is the maximum sweetness that can be achieved.\n```\n\n#### `Example 2`\n\n#### `Input:` \n```\nn = 3, price = [1,3,1], k = 2\n```\n#### `Output:`\n`2`\n\n#### `Explanation:`\n```\nChoose the toffees with the prices [1, 3].\nThe sweetness of the toffee jar is: min(|1 - 3|) = min(2) = 2.\nIt can be proven that 2 is the maximum sweetness that can be achieved.\n```\n\n#### `Constraints`\n\n- `2 <= k <= n <= 10^5`\n\n- `1 <= price[i] <= 10^9`",
    "title": "Maximum Sweetness of Toffee Jar",
    "default_testcase": {
        "id": 7149,
        "input": "6\n13 5 1 8 21 2\n3",
        "expected_output": "8\n",
        "code_problem_id": 794,
        "created_at": "2024-04-04T11:09:13.573Z",
        "updated_at": "2024-04-04T11:09:13.573Z"
    },
    "problem_type": "session_assignment",
    "code_skeletons": [
        {
            "id": 2598,
            "code_problem_id": 794,
            "language": {
                "id": 11,
                "name": "C++ (GCC 9.2.0)",
                "judge0_language_id": 54
            },
            "skeleton_define_class": "class Solution {\npublic:\n    int maximumSweetness(int n, vector<int>& price, int k) {\n      //Write your code here\n\n",
            "skeleton_class_end": "    }\n};",
            "skeleton_solution_class": ""
        },
        {
            "id": 2613,
            "code_problem_id": 794,
            "language": {
                "id": 25,
                "name": "Java (OpenJDK 13.0.1)",
                "judge0_language_id": 62
            },
            "skeleton_define_class": "class Solution {\n    public int maximumSweetness(int n, int[] price, int k) {\n      //Write your code here",
            "skeleton_class_end": "   }\n}",
            "skeleton_solution_class": ""
        },
        {
            "id": 2614,
            "code_problem_id": 794,
            "language": {
                "id": 39,
                "name": "Python (3.8.1)",
                "judge0_language_id": 71
            },
            "skeleton_define_class": "class Solution:\n    def maximumSweetness(self, n, price, k):\n      #Write your code here",
            "skeleton_class_end": "",
            "skeleton_solution_class": ""
        },
        {
            "id": 2615,
            "code_problem_id": 794,
            "language": {
                "id": 26,
                "name": "JavaScript (Node.js 12.14.0)",
                "judge0_language_id": 63
            },
            "skeleton_define_class": "class Solution {\n  maximumSweetness(n, price, k) {\n    //Write your code here",
            "skeleton_class_end": "   }\n}",
            "skeleton_solution_class": ""
        }
    ]
}