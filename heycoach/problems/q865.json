{
    "id": 865,
    "description": "Sumit has an initial array `b` of length `m` and generates `n` additional arrays from this array. One of these arrays is marked as 'special' and undergoes a distinct operation compared to the others.\n\n#### `Operations:`\n\n**Non-special Arrays**:\n- `Sumit selects an index` `i` `such that` `2 \u2264 i \u2264 m-1`.\n- `He subtracts 1 from` `b[i]` `and adds 1 to` `b[i-1]`.\n\n**`Special Array`**:\n- `Sumit selects an index` `i` `such that` `2 \u2264 i < m-1`.\n- `He subtracts 1 from` `b[i]` `and adds 1 to` `b[i+1]`.\n```\nThe operations in this simplified version clearly distinguish the special array by the location of the increment (to the right for the special array, versus to the left for non-special arrays).\n```\n#### `Input:`\n\n- `Number of test cases` `t` `(1 \u2264 `t` \u2264 100).`\n- `Each test case includes:`\n  - `Two integers `n` and `m` (3 \u2264 `n` \u2264 100, 5 \u2264 `m` \u2264 20) indicating the number of arrays and their lengths, respectively.`\n  - `Followed by `n` lines containing `m` integers each, representing the arrays derived from `b`.`\n\n#### `Output:`\n\n`For each test case, output two integers:`\n- `1. The index of the special array (1-based index).`\n-  `2. The number of times the special operation was applied to it.`\n\n#### Example\n\n**Input**:\n```\n1\n3 5\n0 1 2 1 0\n0 2 1 1 0\n0 1 1 2 0\n```\n\n**Output**:\n```\n1 2\n```\n\n#### Explanation\n\n- `In the example, the special array is the third one because the only increment that differs from the left to the right side (`+1` at `b[4]` instead of `b[2]`) indicates the use of the special operation once.`\n\n",
    "title": "Identifying the Unique Transformation",
    "default_testcase": {
        "id": 7954,
        "input": "1\n3 7\n1 2 3 4 3 2 1\n1 3 2 4 2 3 1\n1 2 2 3 3 2 1",
        "expected_output": "1 3\n",
        "code_problem_id": 865,
        "created_at": "2024-05-15T07:14:03.449Z",
        "updated_at": "2024-05-15T07:14:03.449Z"
    },
    "problem_type": "practice",
    "code_skeletons": [
        {
            "id": 2945,
            "code_problem_id": 865,
            "language": {
                "id": 11,
                "name": "C++ (GCC 9.2.0)",
                "judge0_language_id": 54
            },
            "skeleton_define_class": "class UniqueTransformation {\npublic:\n    static vector<int> findSpecialArray(vector<vector<int>>& arrays) {\n      //Write your code here",
            "skeleton_class_end": "    }\n};",
            "skeleton_solution_class": ""
        },
        {
            "id": 2949,
            "code_problem_id": 865,
            "language": {
                "id": 25,
                "name": "Java (OpenJDK 13.0.1)",
                "judge0_language_id": 62
            },
            "skeleton_define_class": "class UniqueTransformation {\n    public static int[] findSpecialArray(int[][] arrays) {\n      //Write your code here",
            "skeleton_class_end": "  }\n}",
            "skeleton_solution_class": ""
        },
        {
            "id": 2951,
            "code_problem_id": 865,
            "language": {
                "id": 39,
                "name": "Python (3.8.1)",
                "judge0_language_id": 71
            },
            "skeleton_define_class": "class UniqueTransformation:\n    @staticmethod\n    def find_special_array(arrays):\n      #Write your code here",
            "skeleton_class_end": "",
            "skeleton_solution_class": ""
        },
        {
            "id": 2952,
            "code_problem_id": 865,
            "language": {
                "id": 26,
                "name": "JavaScript (Node.js 12.14.0)",
                "judge0_language_id": 63
            },
            "skeleton_define_class": "class UniqueTransformation {\n    static findSpecialArray(arrays) {\n      //Write your code here",
            "skeleton_class_end": "   }\n}",
            "skeleton_solution_class": ""
        }
    ]
}