{
    "id": 341,
    "description": "Given `N` nodes labelled from `0` to `N - 1` and a list of undirected edges (where each edge is a pair of nodes), determine if these edges form a valid tree. A graph is considered a valid tree if it satisfies the following properties:\n\n- It is **connected**: There is a path between every pair of vertices.\n- It has **no cycles**: There are no loops or circular paths.\n\n#### `Input Format:`\n- `The first line contains an integer `N`, representing the number of nodes in the graph.`\n- `The next line contains an integer `M`, representing the number of edges in the graph.`\n- `The following `M` lines contain two space-separated integers each, representing the undirected edges between the nodes.`\n\n#### `Output Format:`\n- `Print \"True\" if the edges form a valid tree; otherwise, print \"False\".`\n\n#### `Example:`\n**`Input`**:\n\n```\n5\n4\n0 1\n0 2\n0 3\n1 4\n```\n**`Output:`**\n\n```True```\n#### `Constraints:`\n- `1 <= T <= 5` `where `T` is the number of test cases.`\n- `1 <= N <= 10^3`\n- `1 <= M <= 10^3`\n\n\n**` Explanation:`**  \n`In this case, the graph has `5` nodes and `4` edges. The edges connect the nodes as follows: [0, 1], [0, 2], [0, 3], [1, 4]. This graph is connected (there's a path between any two nodes) and acyclic (it contains no cycles), which meets the criteria for a valid tree.`",
    "title": "Graph Valid Tree",
    "default_testcase": {
        "id": 6117,
        "input": "5\n5\n0 1\n1 2\n2 3\n1 3\n1 4",
        "expected_output": "False\n",
        "code_problem_id": 341,
        "created_at": "2024-03-08T06:38:22.298Z",
        "updated_at": "2024-03-08T06:38:22.298Z"
    },
    "problem_type": "session_assignment",
    "code_skeletons": [
        {
            "id": 800,
            "code_problem_id": 341,
            "language": {
                "id": 11,
                "name": "C++ (GCC 9.2.0)",
                "judge0_language_id": 54
            },
            "skeleton_define_class": "class Solution {\npublic:\n    bool checkgraph(vector<vector<int>> edges, int n, int m) {\n      //Write your code here",
            "skeleton_class_end": "    }\n};",
            "skeleton_solution_class": ""
        },
        {
            "id": 1029,
            "code_problem_id": 341,
            "language": {
                "id": 25,
                "name": "Java (OpenJDK 13.0.1)",
                "judge0_language_id": 62
            },
            "skeleton_define_class": "class Solution {\n    public static boolean checkgraph(List<List<Integer>> edges, int n, int m) {\n      //Write your code here",
            "skeleton_class_end": "    }\n}",
            "skeleton_solution_class": ""
        },
        {
            "id": 1030,
            "code_problem_id": 341,
            "language": {
                "id": 39,
                "name": "Python (3.8.1)",
                "judge0_language_id": 71
            },
            "skeleton_define_class": "class Solution:\n    def checkgraph(self, edges, n, m):\n      #Write your code here",
            "skeleton_class_end": "",
            "skeleton_solution_class": ""
        },
        {
            "id": 1031,
            "code_problem_id": 341,
            "language": {
                "id": 26,
                "name": "JavaScript (Node.js 12.14.0)",
                "judge0_language_id": 63
            },
            "skeleton_define_class": "class Solution {\n    constructor() {\n        this.adj = [];\n        this.visited = [];\n    }\n    checkgraph(edges, n, m) {\n      //Write your code here",
            "skeleton_class_end": "    }\n}",
            "skeleton_solution_class": ""
        }
    ]
}