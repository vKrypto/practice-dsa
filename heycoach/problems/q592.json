{
    "id": 592,
    "description": "Given an input stream of N integers. The task is to insert these numbers into a new stream and find the median of the stream formed by each insertion of X to the new stream.\n\n**`Example:`**\n\n**`Input:`**  \n\n```\nN = 4  \nX[] = {5, 15, 1, 3}\n```\n\n**`Output: `** \n```\n5  \n10  \n5  \n4  \n```\n\n**`Explanation: `**     \n\n```\nFlow in stream: 5, 15, 1, 3   \n5 goes to stream --> median 5 (5)     \n15 goes to stream --> median 10 (5, 15)   \n1 goes to stream --> median 5 (5, 15, 1)   \n3 goes to stream --> median 4 (5, 15, 1, 3) \n\n```\n\n \n**`Constraints:`**\n- `1 <= N <= 10^6 ` \n- `1 <= x <= 10^6`",
    "title": "Median of Stream",
    "default_testcase": {
        "id": 4136,
        "input": "4\n5\n15\n1\n3",
        "expected_output": "5\n10\n5\n4\n",
        "code_problem_id": 592,
        "created_at": "2024-01-24T16:50:56.722Z",
        "updated_at": "2024-01-24T16:50:56.722Z"
    },
    "problem_type": "practice",
    "code_skeletons": [
        {
            "id": 1772,
            "code_problem_id": 592,
            "language": {
                "id": 11,
                "name": "C++ (GCC 9.2.0)",
                "judge0_language_id": 54
            },
            "skeleton_define_class": "class MedianFinder {\n    priority_queue<int> maxHeap; // smaller half\n    priority_queue<int, vector<int>, greater<int>> minHeap; // larger half\n\npublic:\n    double findMedian() {",
            "skeleton_class_end": "   }\n  }\n};",
            "skeleton_solution_class": ""
        },
        {
            "id": 1888,
            "code_problem_id": 592,
            "language": {
                "id": 25,
                "name": "Java (OpenJDK 13.0.1)",
                "judge0_language_id": 62
            },
            "skeleton_define_class": "class MedianFinder {\n    private PriorityQueue<Integer> maxHeap; // smaller half\n    private PriorityQueue<Integer> minHeap; // larger half\n      public int findMedian() {\n        //Write your code here",
            "skeleton_class_end": "     }\n  }\n}",
            "skeleton_solution_class": ""
        },
        {
            "id": 1889,
            "code_problem_id": 592,
            "language": {
                "id": 39,
                "name": "Python (3.8.1)",
                "judge0_language_id": 71
            },
            "skeleton_define_class": "class MedianFinder:\n    def __init__(self):",
            "skeleton_class_end": "",
            "skeleton_solution_class": ""
        },
        {
            "id": 1890,
            "code_problem_id": 592,
            "language": {
                "id": 26,
                "name": "JavaScript (Node.js 12.14.0)",
                "judge0_language_id": 63
            },
            "skeleton_define_class": "class MedianFinder {\n    constructor() {\n        this.maxHeap = new MaxPriorityQueue(); // smaller half\n        this.minHeap = new MinPriorityQueue(); // larger half\n    }\n\n    addNum(num) {",
            "skeleton_class_end": "     }\n   }\n}",
            "skeleton_solution_class": ""
        }
    ]
}