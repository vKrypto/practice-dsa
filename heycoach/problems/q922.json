{
    "id": 922,
    "description": "In a network of n nodes, each node is uniquely labeled from 0 to n\u22121. The connections between the nodes are represented by a list of pairs, where each pair [u,v] signifies a bi-directional link between nodes u and v. No node has a connection to itself, and each pair appears only once in the list.\n\nYou are tasked with determining whether there exists a route between two specified nodes, called the start and the end.\n\n**Input Details:**\n\nAn integer n, m, representing the total number of nodes and number of edges in the network.</br>\nFurther m line contains A list of connections, where each connection is a pair of integers [u,v].</br>\nLst line contain two integers, start and end, representing the initial and terminal nodes, respectively.\n\n**Output Details:**\n\nReturn true if a route exists between the start and end nodes, otherwise return false.\n\n**Example:**\n\n**Input:**\n```\nn = 4\nconnections = [[0, 1], [1, 2], [2, 3]]\nstart = 0\nend = 3\n```\n**Output:**\n```\ntrue\n```\n**Explanation:**\nThere is a route from node 0 to node 3:</br>\n- 0 \u2192 1 \u2192 2 \u2192 3\n\n**Constraints:**</br>\n1\u2264n\u2264200,000</br>\n0\u2264connections.length\u2264200,000</br>\nEach connection is a pair of distinct nodes [u,v] such that 0\u2264u,v\u2264n\u22121</br>\n0\u2264start,end\u2264n\u22121",
    "title": "Path Existence in an Undirected Graph",
    "default_testcase": {
        "id": 8142,
        "input": "6 5\n0 1\n0 2\n3 5\n5 4\n4 3\n0 5",
        "expected_output": "false",
        "code_problem_id": 922,
        "created_at": "2024-05-19T11:16:33.639Z",
        "updated_at": "2024-05-19T11:16:33.639Z"
    },
    "problem_type": "practice",
    "code_skeletons": [
        {
            "id": 3061,
            "code_problem_id": 922,
            "language": {
                "id": 11,
                "name": "C++ (GCC 9.2.0)",
                "judge0_language_id": 54
            },
            "skeleton_define_class": "\nclass Solution {\npublic:\n    bool validPath(int n, vector<vector<int>>& edges, int source, int destination) {\n       \n    ",
            "skeleton_class_end": "}\n};",
            "skeleton_solution_class": ""
        },
        {
            "id": 3062,
            "code_problem_id": 922,
            "language": {
                "id": 25,
                "name": "Java (OpenJDK 13.0.1)",
                "judge0_language_id": 62
            },
            "skeleton_define_class": "\nclass Solution {\n  public boolean validPath(int n, int[][] edges, int source, int destination) {\n       \n    ",
            "skeleton_class_end": "}\n}",
            "skeleton_solution_class": ""
        },
        {
            "id": 3067,
            "code_problem_id": 922,
            "language": {
                "id": 26,
                "name": "JavaScript (Node.js 12.14.0)",
                "judge0_language_id": 63
            },
            "skeleton_define_class": "class Solution {\n    validPath(n, edges, source, destination) {\n       ",
            "skeleton_class_end": "}\n}",
            "skeleton_solution_class": ""
        },
        {
            "id": 3068,
            "code_problem_id": 922,
            "language": {
                "id": 39,
                "name": "Python (3.8.1)",
                "judge0_language_id": 71
            },
            "skeleton_define_class": "class Solution:\n    def validPath(self, n, edges, source, destination):\n        ",
            "skeleton_class_end": "",
            "skeleton_solution_class": ""
        }
    ]
}