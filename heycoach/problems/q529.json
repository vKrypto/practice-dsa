{
    "id": 529,
    "description": "\"You are given the heads of two sorted linked lists list1 and list2.\n\nMerge the two lists into one sorted list. The list should be made by splicing together the nodes of the first two lists.\n\nReturn the head of the merged linked list.The number of nodes in both lists is in the range [0, 50].\n-100 <= Node.val <= 100\nBoth list1 and list2 are sorted in non-decreasing order.\"\n\n**Input**:\n```\n list1 = [1,2,4], list2 = [1,3,4]\n```\n**Output**: \n```\n[1,1,2,3,4,4]\n```\n**Input**: \n```\nlist1 = [], list2 = [0]\n```\n**Output**:\n```\n [0]\n``` ",
    "title": "merge  two sorted linked list",
    "default_testcase": {
        "id": 3544,
        "input": "3\n1 2 4\n3\n1 3 4",
        "expected_output": "1 1 2 3 4 4 \n",
        "code_problem_id": 529,
        "created_at": "2024-01-05T18:01:49.988Z",
        "updated_at": "2024-01-05T18:01:49.988Z"
    },
    "problem_type": "session_assignment",
    "code_skeletons": [
        {
            "id": 1573,
            "code_problem_id": 529,
            "language": {
                "id": 11,
                "name": "C++ (GCC 9.2.0)",
                "judge0_language_id": 54
            },
            "skeleton_define_class": "//Definition of node class\n/*\nstruct ListNode {\n    int val;\n    ListNode* next;\n    ListNode() : val(0), next(nullptr) {}\n    ListNode(int x) : val(x), next(nullptr) {}\n    ListNode(int x, ListNode* next) : val(x), next(next) {}\n};\n*/\n\n\nclass Solution {\npublic:\n    ListNode* mergeTwoLists(ListNode* first, ListNode* second) {\n      //Write your code here",
            "skeleton_class_end": "    }\n};",
            "skeleton_solution_class": ""
        },
        {
            "id": 1576,
            "code_problem_id": 529,
            "language": {
                "id": 39,
                "name": "Python (3.8.1)",
                "judge0_language_id": 71
            },
            "skeleton_define_class": "\"\"\"\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\"\"\"\n\nclass Solution:\n    def mergeTwoLists(self, first, second):",
            "skeleton_class_end": null,
            "skeleton_solution_class": "\n       "
        },
        {
            "id": 1578,
            "code_problem_id": 529,
            "language": {
                "id": 26,
                "name": "JavaScript (Node.js 12.14.0)",
                "judge0_language_id": 63
            },
            "skeleton_define_class": "/*\nclass ListNode {\n    constructor(x) {\n        this.val = x;\n        this.next = null;\n    }\n}\n*/\n\nclass Solution {\n    mergeTwoLists(first, second) {\n      //Write your code here",
            "skeleton_class_end": "    }\n}",
            "skeleton_solution_class": ""
        },
        {
            "id": 1681,
            "code_problem_id": 529,
            "language": {
                "id": 25,
                "name": "Java (OpenJDK 13.0.1)",
                "judge0_language_id": 62
            },
            "skeleton_define_class": "// Definition for singly-linked list.\n/*class ListNode {\n    int val;\n    ListNode next;\n\n    ListNode() {}\n\n    ListNode(int x) {\n        val = x;\n        next = null;\n    }\n\n    ListNode(int x, ListNode next) {\n        val = x;\n        this.next = next;\n    }\n}*/\n\nclass Solution {\n    public ListNode mergeTwoLists(ListNode first, ListNode second) {\n      //Write your code here;",
            "skeleton_class_end": "    }\n}",
            "skeleton_solution_class": ""
        }
    ]
}