{
    "id": 739,
    "description": "You are given the 'y' and 'x' coordinates of points on a x-y coordinate plane. You have to draw a line connecting these points in such a way that the graph can be called \"beautiful\".  A beautiful graph is the one where either the graph strictly increases or strictly decreases or it can strictly increase and then decrease or vice-versa. You can do one operation that is you can eliminate any point on the coordinate plane. Determine the minimum number of operations to convert the points into a beautiful graph.\n\nInput Format:\n\nThe first line contains an integer 'n' denoting the number of points.\n\nThe second line contains n space separated integers where each index denotes the 'x' coordinate and the value at that index represents the 'y' coordinate.\n\nOutput Format:\n\nReturn the minimum number of operations to convert the points into a beautiful graph.\n\nSample Input :\n\n5\n\n3 4 2 6 5\n\nSample Output:\n\n1\n\nExplanation: By eliminating the value 2, we can make the remaining points create a beautiful graph.",
    "title": "Beautiful Graph",
    "default_testcase": {
        "id": 5443,
        "input": "5\n3 4 2 6 5",
        "expected_output": "1\n",
        "code_problem_id": 739,
        "created_at": "2024-02-13T12:31:38.587Z",
        "updated_at": "2024-02-13T12:31:38.587Z"
    },
    "problem_type": "practice",
    "code_skeletons": [
        {
            "id": 2365,
            "code_problem_id": 739,
            "language": {
                "id": 11,
                "name": "C++ (GCC 9.2.0)",
                "judge0_language_id": 54
            },
            "skeleton_define_class": "class Solution{\n    public:\n    int solve(int n, int* ar){\n      //Write your code here",
            "skeleton_class_end": "}\n};",
            "skeleton_solution_class": ""
        },
        {
            "id": 2366,
            "code_problem_id": 739,
            "language": {
                "id": 39,
                "name": "Python (3.8.1)",
                "judge0_language_id": 71
            },
            "skeleton_define_class": "class Solution:\n    def solve(self, n, ar):\n        #Write your code here",
            "skeleton_class_end": "",
            "skeleton_solution_class": ""
        },
        {
            "id": 2367,
            "code_problem_id": 739,
            "language": {
                "id": 26,
                "name": "JavaScript (Node.js 12.14.0)",
                "judge0_language_id": 63
            },
            "skeleton_define_class": "class Solution {\n    solve(n, ar) {\n        //Write your code here",
            "skeleton_class_end": "}\n}",
            "skeleton_solution_class": ""
        },
        {
            "id": 2368,
            "code_problem_id": 739,
            "language": {
                "id": 25,
                "name": "Java (OpenJDK 13.0.1)",
                "judge0_language_id": 62
            },
            "skeleton_define_class": "class Solution {\n    public int solve(int n, int[] ar) {\n      //Write your code here",
            "skeleton_class_end": "}\n}",
            "skeleton_solution_class": ""
        }
    ]
}