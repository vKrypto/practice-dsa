{
    "id": 942,
    "description": "There are n soldiers standing in a line. Each soldier is assigned a unique rating value.\nYou have to form a team of 3 soldiers amongst them under the following rules:\nChoose 3 soldiers with index (i, j, k) with rating (rating[i], rating[j], rating[k]).\nA team is valid if: (rating[i] < rating[j] < rating[k]) or (rating[i] > rating[j] > rating[k]) where (0 <= i < j < k < n).\n\nReturn the number of teams you can form given the conditions. (soldiers can be part of multiple teams).\n \n**Example 1:**\n```\nInput: n = 5, rating = [2,5,3,4,1]\nOutput: 3\nExplanation: We can form three teams given the conditions. (2,3,4), (5,4,1), (5,3,1). \n````\n**Example 2:**\n```\nInput: n = 3, rating = [2,1,3]\nOutput: 0\nExplanation: We can't form any team given the conditions.\n```\n**Example 3:**\n```\nInput: n = 4, rating = [1,2,3,4]\nOutput: 4\n````\n**Input Format:**\n```\nThe first line contains an integer n \u2014 the number of  soldiers.\nThe second line contains n space-separated integers \u2014 the elements of the array rating.\n```\n**Output Format:**\n```\nPrint a single integer \u2014  the number of teams you can form given the conditions. \n```\n\n \n**Constraints:**\n\n`n == rating.length`\n\n`3 <= n <= 1000`\n\n`1 <= rating[i] <= 10^5`\n\n`All the integers in rating are unique.`\n",
    "title": "Team Formation Problem",
    "default_testcase": {
        "id": 8262,
        "input": "5\n2 5 3 4 1",
        "expected_output": "3\n",
        "code_problem_id": 942,
        "created_at": "2024-05-24T13:27:05.622Z",
        "updated_at": "2024-05-24T13:27:05.622Z"
    },
    "problem_type": "practice",
    "code_skeletons": [
        {
            "id": 3136,
            "code_problem_id": 942,
            "language": {
                "id": 11,
                "name": "C++ (GCC 9.2.0)",
                "judge0_language_id": 54
            },
            "skeleton_define_class": "\n\nclass Solution {\npublic:\n  int numTeams(int n, vector<int>& rating) {",
            "skeleton_class_end": "}\n};",
            "skeleton_solution_class": ""
        },
        {
            "id": 3137,
            "code_problem_id": 942,
            "language": {
                "id": 25,
                "name": "Java (OpenJDK 13.0.1)",
                "judge0_language_id": 62
            },
            "skeleton_define_class": "\n\nclass Solution {\n\n\n    int numTeams(int n, int[] rating) {",
            "skeleton_class_end": "}\n}",
            "skeleton_solution_class": ""
        },
        {
            "id": 3138,
            "code_problem_id": 942,
            "language": {
                "id": 39,
                "name": "Python (3.8.1)",
                "judge0_language_id": 71
            },
            "skeleton_define_class": "class Solution:\n    def numTeams(self, n, rating):",
            "skeleton_class_end": "",
            "skeleton_solution_class": ""
        },
        {
            "id": 3139,
            "code_problem_id": 942,
            "language": {
                "id": 26,
                "name": "JavaScript (Node.js 12.14.0)",
                "judge0_language_id": 63
            },
            "skeleton_define_class": "class Solution {\n\n  numTeams(n, rating) {",
            "skeleton_class_end": "}\n}",
            "skeleton_solution_class": ""
        }
    ]
}