{
    "id": 715,
    "description": "\nThere are n cities. Some of them are connected, while some are not. If city a is connected directly with city b, and city b is connected directly with city c, then city a is connected indirectly with city c.\n\nA `province` is a group of directly or indirectly connected cities and no other cities outside of the group.\n\nYou are given an n x n matrix isConnected where isConnected[i][j] = 1 if the ith city and the jth city are directly connected, and isConnected[i][j] = 0 otherwise.\n\nReturn the total number of `provinces`.\n\n### Example 1\n\n![Image](https://assets.leetcode.com/uploads/2020/12/24/graph1.jpg)\n\n### Input\n\n```CPP\nisConnected = [[1,1,0],[1,1,0],[0,0,1]]\n```\n\n### Output\n\n```CPP\n2\n```\n\n### Example 2\n\n![Image](https://assets.leetcode.com/uploads/2020/12/24/graph2.jpg)\n\n### Input\n\n```CPP\n isConnected = [[1,0,0],[0,1,0],[0,0,1]]\n```\n\n### Output\n\n```CPP\n3\n```\n\n### Constraints:\n\n- 1 <= n <= 200\n- n == isConnected.length\n- n == isConnected[i].length\n- isConnected[i][j] is 1 or 0.\n- isConnected[i][i] == 1\n- isConnected[i][j] == isConnected[j][i]\n",
    "title": "Island",
    "default_testcase": {
        "id": 4839,
        "input": "4 4\n1 0 0 1\n0 1 1 0\n0 1 1 1\n1 0 1 1",
        "expected_output": "1",
        "code_problem_id": 715,
        "created_at": "2024-02-01T09:33:30.728Z",
        "updated_at": "2024-02-01T09:33:30.728Z"
    },
    "problem_type": "practice",
    "code_skeletons": [
        {
            "id": 2285,
            "code_problem_id": 715,
            "language": {
                "id": 11,
                "name": "C++ (GCC 9.2.0)",
                "judge0_language_id": 54
            },
            "skeleton_define_class": "\nclass Solution {\npublic:\n    int findCircleNum(vector<vector<int>>& c) {",
            "skeleton_class_end": "    }\n};",
            "skeleton_solution_class": ""
        },
        {
            "id": 2286,
            "code_problem_id": 715,
            "language": {
                "id": 25,
                "name": "Java (OpenJDK 13.0.1)",
                "judge0_language_id": 62
            },
            "skeleton_define_class": "\nclass Solution {\n      public int findCircleNum(List<List<Integer>> c) {",
            "skeleton_class_end": "            }\n        }\n    }\n\n}",
            "skeleton_solution_class": ""
        },
        {
            "id": 2287,
            "code_problem_id": 715,
            "language": {
                "id": 39,
                "name": "Python (3.8.1)",
                "judge0_language_id": 71
            },
            "skeleton_define_class": "class Solution:\n    def findCircleNum(self, c):",
            "skeleton_class_end": "",
            "skeleton_solution_class": ""
        },
        {
            "id": 2301,
            "code_problem_id": 715,
            "language": {
                "id": 26,
                "name": "JavaScript (Node.js 12.14.0)",
                "judge0_language_id": 63
            },
            "skeleton_define_class": "class Solution {\n    constructor() {\n        this.visited = [];\n        this.adjList = [];\n    }\n     findCircleNum(c) {",
            "skeleton_class_end": "            }\n        });\n    }\n\n\n\n \n}",
            "skeleton_solution_class": ""
        }
    ]
}