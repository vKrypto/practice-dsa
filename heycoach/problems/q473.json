{
    "id": 473,
    "description": "A Developer is designing a game which is a well known game called \"CHESS\". He designed in a way that for every move in the game the player must pay some amount. The game is designed in a way that the player who pays less amount then the player is considered as winner for the game. Here at easy level the game focuses on the movement of knight from one position to another position. So the task is to find the minimum amount required which the player had to pay for moving the knight from one position to another position.\n\n**NOTE **: Any number of steps can be used to reach the destination.\n\n**Knight Movement**: A knight in chess can move in an L-shape: two squares vertically and one square horizontally, or two squares horizontally and one square vertically. This means from any position (a, b), the knight can move to eight possible positions: (a\u00b11, b\u00b12), (a\u00b12, b\u00b11) (assuming these positions are inside the 8x8 grid).\n\n### Input Format:\n\nThe input format consists of 4 integers a,b,c,d seperated by the space. The letters a,b represents the start position of the Knight. c,d integers represents the destination of the knight.\n\n### Output Format:\n\nFor each test case, print the minimum amount the player had to pay in separate line. If it's impossible to reach the destination then print -1.\n\n###    Sample Input and Output \n \n#### Sample Input 1\n\n```\n2 5 5 2 \n4 7 3 2\n1 2 3 4\n```\n#### Sample Output 2\n```\n42\n78\n18\n```\n### Explanation\n\n#### Test Case 1 Explanation\n```\nFor moving knight from (2, 5) to (5, 2) in minimum cost, one of the path is (2, 5) \u2192 (3, 3) \u2192 (5, 2)\n\nAmount paid:\n\n(2, 5) \u2192 (3, 3) = (2 * 3 + 5 * 3) = 21\n(3, 3) \u2192 (5, 2) = (3 * 5 + 3 * 2) = 21\n\nTotal cost = 42\n```\n#### Test Case 2 Explanation\n```\n\nStarting from (4, 7), the knight can reach the following positions along with the cost of each move: (2, 6) with cost 46, (6, 6) with cost 38, (3, 5) with cost 44, and (5, 5) with cost 40.\n\nThe position with the minimum cost of the first move is (5, 5) with cost 40. It's important to note that there may be other paths leading to the destination that involves less total cost but has a higher immediate cost for the first move.\n\nMoving from (5, 5) to all possible positions in the next step:\n\n(3, 4) with cost 30\n(7, 4) with cost 22\n(6, 3) with cost 27\n(4, 3) with cost 33\nThe position with the minimum cost for the second move is (7, 4) with cost 22.\n\nMoving from (7, 4) to the next possible positions:\n\nIn one step, (7, 4) can reach (5, 3) with cost 38 and (5, 5) with cost 28. Reaching (5, 5) would take us back to a previous position, so we continue with (5, 3) as our next step using a cost of 38.\n\nFinally, moving from (5, 3) to the destination (3, 2) would cost 18.\n\nThe total cost from (4, 7) to (3, 2) using this path is 40 + 22 + 18 = 80. However, this is not the optimal solution. If we explore other paths, we will find:\n\nPath: (4, 7) \u2192 (2, 6) \u2192 (0, 7) \u2192 (1, 5) \u2192 (3, 2) with move costs 46 + 42 + 15 + 25 = 128 (not optimal)\nPath: (4, 7) \u2192 (6, 6) \u2192 (4, 5) \u2192 (3, 7) \u2192 (1, 6) \u2192 (3, 2) with move costs 38 + 24 + 45 + 21 + 30 = 158 (not optimal)\nPath: (4, 7) \u2192 (3, 5) \u2192 (5, 4) \u2192 (3, 3) \u2192 (1, 2) \u2192 (3, 2) with move costs 44 + 31 + 15 + 21 + 12 = 123 (not optimal)\nPath: (4, 7) \u2192 (5, 5) \u2192 (3, 4) \u2192 (1, 5) \u2192 (3, 2) with move costs 40 + 30 + 14 + 24 = 108 (not optimal)\nPath: (4, 7) \u2192 (5, 5) \u2192 (6, 3) \u2192 (5, 1) \u2192 (3, 2) with move costs 40 + 27 + 11 + 22 = 100 (not optimal)\nPath: (4, 7) \u2192 (5, 5) \u2192 (4, 3) \u2192 (3, 1) \u2192 (5, 0) \u2192 (3, 2) with move costs 40 + 33 + 13 + 20 + 0 = 106 (not optimal)\nThe optimal solution, which results in the minimum cost, is (4,7) \u2192 (6,6) \u2192 (4,5) \u2192 (3,3) \u2192 (5,2) \u2192 (3,2) with move costs 78, and this is why the answer for the second test case is 78.\n\n```\n### Constraints:\n\nThe chess has a dimension of 8x8, and the index of left bottom cell (0, 0).\n\nKnight move only in a standard way, i.e. 2 row and 1 column or 1 row and 2 column.\n\nIf in a step knight move from (a, b) to (c, d), then the player had to pay a*c + b*d amount.\n\n0 \u2264 a, b, c, d \u2264 7\n",
    "title": "The Knight move",
    "default_testcase": {
        "id": 3195,
        "input": "2 5 5 2\n4 7 3 2 \n1 2 3 4",
        "expected_output": "42\n78\n18\n",
        "code_problem_id": 473,
        "created_at": "2023-12-27T12:43:32.199Z",
        "updated_at": "2023-12-27T12:43:32.199Z"
    },
    "problem_type": "practice",
    "code_skeletons": [
        {
            "id": 1325,
            "code_problem_id": 473,
            "language": {
                "id": 25,
                "name": "Java (OpenJDK 13.0.1)",
                "judge0_language_id": 62
            },
            "skeleton_define_class": "class Solution {\n    public int findShortestPath(int starti, int startj, int endi, int endj) {\n      // write your code here",
            "skeleton_class_end": "  }\n}",
            "skeleton_solution_class": ""
        },
        {
            "id": 1326,
            "code_problem_id": 473,
            "language": {
                "id": 11,
                "name": "C++ (GCC 9.2.0)",
                "judge0_language_id": 54
            },
            "skeleton_define_class": "class Solution {\npublic:\n    int findShortestPath(int starti, int startj, int endi, int endj) {\n      // write your code here",
            "skeleton_class_end": "  }\n};",
            "skeleton_solution_class": ""
        },
        {
            "id": 1465,
            "code_problem_id": 473,
            "language": {
                "id": 39,
                "name": "Python (3.8.1)",
                "judge0_language_id": 71
            },
            "skeleton_define_class": "class Solution:\n    def findShortestPath(self, starti, startj, endi, endj):\n      # write the code here",
            "skeleton_class_end": null,
            "skeleton_solution_class": ""
        },
        {
            "id": 2406,
            "code_problem_id": 473,
            "language": {
                "id": 26,
                "name": "JavaScript (Node.js 12.14.0)",
                "judge0_language_id": 63
            },
            "skeleton_define_class": "class Solution {\n    findShortestPath(starti, startj, endi, endj) {\n      // write your code here",
            "skeleton_class_end": "  }\n}",
            "skeleton_solution_class": ""
        }
    ]
}