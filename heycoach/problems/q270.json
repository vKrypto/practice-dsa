{
    "id": 270,
    "description": "Given the head of a singly linked list, reorder the list such that all nodes at odd positions are grouped together followed by the nodes at even positions. The first node is considered at position 1 (odd), the second node at position 2 (even), and so on. It is essential that the relative order within the odd and even groups is maintained as per the original list.\n\n**`Input Format`**:\n- `The first line contains a single integer, `n`, representing the size of the linked list.`\n- `The second line consists of `n` space-separated integers representing the elements of the linked list.`\n\n**`Output Format`**:\n- `The output should be the elements of the reordered linked list, with each node's value separated by a space, in the same order as they appear in the final reordered list.`\n\n**`Example`**:\n\n**`Input`**:\n```\n5\n1 2 3 4 5\n```\n**`Output`**:\n```\n1 3 5 2 4\n```\n**`Constraints`**:\n- `The number of nodes in the linked list is in the range` `0 < n < 10000.`\n- `Node values are within the range` `-10^6 <= Node.val <= 10^6`.`\n- `The solution must achieve `O(n)` time complexity and `O(1)` extra space complexity, where `n` is the size of the linked list.`</br></br>\n**`Explanation`**:  \n`In the given linked list, the nodes at odd positions are [1, 3, 5], and the nodes at even positions are [2, 4].Reordering these nodes so that all odd nodes come before even nodes, while maintaining their relative order, gives us [1, 3, 5, 2, 4] as the result.`",
    "title": " Odd Even Linked List",
    "default_testcase": {
        "id": 6243,
        "input": "5\n1 2 3 4 5",
        "expected_output": "1 3 5 2 4 ",
        "code_problem_id": 270,
        "created_at": "2024-03-11T06:25:17.934Z",
        "updated_at": "2024-03-11T06:25:17.934Z"
    },
    "problem_type": "level_test",
    "code_skeletons": [
        {
            "id": 531,
            "code_problem_id": 270,
            "language": {
                "id": 11,
                "name": "C++ (GCC 9.2.0)",
                "judge0_language_id": 54
            },
            "skeleton_define_class": "/*class ListNode {\npublic:\n    int val;\n    ListNode *next;\n    ListNode(int x) : val(x), next(nullptr) {}\n};*/\n\nclass Solution {\npublic:\n    ListNode* oddEvenList(ListNode* head) {\n      //Write your code here",
            "skeleton_class_end": "   }\n};",
            "skeleton_solution_class": ""
        },
        {
            "id": 546,
            "code_problem_id": 270,
            "language": {
                "id": 25,
                "name": "Java (OpenJDK 13.0.1)",
                "judge0_language_id": 62
            },
            "skeleton_define_class": "/*class ListNode {\n    int val;\n    ListNode next;\n    ListNode(int x) { val = x; }\n}*/\nclass Solution {\n    public ListNode oddEvenList(ListNode head) {\n      //Write your code here",
            "skeleton_class_end": "   }\n}",
            "skeleton_solution_class": ""
        },
        {
            "id": 549,
            "code_problem_id": 270,
            "language": {
                "id": 39,
                "name": "Python (3.8.1)",
                "judge0_language_id": 71
            },
            "skeleton_define_class": "'''\nclass ListNode:\n    def __init__(self, val=0):\n        self.val = val\n        self.next = None\n'''\nclass Solution:\n    def oddEvenList(self, head):\n      #Write your code here",
            "skeleton_class_end": "",
            "skeleton_solution_class": ""
        },
        {
            "id": 550,
            "code_problem_id": 270,
            "language": {
                "id": 26,
                "name": "JavaScript (Node.js 12.14.0)",
                "judge0_language_id": 63
            },
            "skeleton_define_class": "/*class ListNode {\n    constructor(val = 0, next = null) {\n        this.val = val;\n        this.next = next;\n    }\n}*/\n\nclass Solution {\n    oddEvenList(head) {\n      //Write your code here",
            "skeleton_class_end": "   }\n}",
            "skeleton_solution_class": ""
        }
    ]
}