{
    "id": 627,
    "description": "You are given a positive integer p. Consider an array nums `(1-indexed)` that consists of the integers in the inclusive range [1, 2p - 1] in their binary representations. You are allowed to do the following operation any number of times:\n\nChoose two elements x and y from nums.\nChoose a bit in x and swap it with its corresponding bit in y. Corresponding bit refers to the bit that is in the same position in the other integer.\nFor example, if x = 1101 and y = 0011, after swapping the 2nd bit from the right, we have x = 1111 and y = 0001.\n\nFind the `minimum non-zero` product of nums after performing the above operation any number of times. Return this product modulo `10^9 + 7`.\n\n* Note: The answer should be the minimum product before the modulo operation is done.\n\nInput Format:\n\nA single integer p which makes up the array nums.\n\nOutput format:\n\nReturn a single integer representing the minimum non zero product of nums. \n\n### Example 1 \n\n### Input\n```CPP\np = 2\n``` \n### Output \n```CPP \n6\n``` \n#### Explanation:\n nums = [01, 10, 11].\nAny swap would either make the product 0 or stay the same.\nThus, the array product of 1 * 2 * 3 = 6 is already minimized.\n\n\n### Example 2 \n\n### Input\n```CPP\np=3\n``` \n### Output \n```CPP \n1512\n``` \n#### Explanation:\nnums = [001, 010, 011, 100, 101, 110, 111]\n- In the first operation we can swap the leftmost bit of the second and fifth elements.\n    - The resulting array is [001, 110, 011, 100, 001, 110, 111].\n- In the second operation we can swap the middle bit of the third and fourth elements.\n    - The resulting array is [001, 110, 001, 110, 001, 110, 111].\nThe array product is 1 * 6 * 1 * 6 * 1 * 6 * 7 = 1512, which is the minimum possible product.\n\n\n### Constraints:\n\n1 <= p <= 60\n",
    "title": "Minimum Non-Zero Product of the Array Elements",
    "default_testcase": {
        "id": 4204,
        "input": "45",
        "expected_output": "865308368",
        "code_problem_id": 627,
        "created_at": "2024-01-27T08:26:40.776Z",
        "updated_at": "2024-01-27T08:26:40.776Z"
    },
    "problem_type": "practice",
    "code_skeletons": [
        {
            "id": 1913,
            "code_problem_id": 627,
            "language": {
                "id": 11,
                "name": "C++ (GCC 9.2.0)",
                "judge0_language_id": 54
            },
            "skeleton_define_class": "class Solution {\n  public:\n    int mod = 1e9 + 7;\n    int minNonZeroProduct(int p) {\n    ",
            "skeleton_class_end": "}\n};",
            "skeleton_solution_class": ""
        },
        {
            "id": 1915,
            "code_problem_id": 627,
            "language": {
                "id": 25,
                "name": "Java (OpenJDK 13.0.1)",
                "judge0_language_id": 62
            },
            "skeleton_define_class": "class Solution {\n    private final int mod = 1000000007;\n    int minNonZeroProduct(int p) {",
            "skeleton_class_end": "}\n}",
            "skeleton_solution_class": ""
        },
        {
            "id": 1916,
            "code_problem_id": 627,
            "language": {
                "id": 39,
                "name": "Python (3.8.1)",
                "judge0_language_id": 71
            },
            "skeleton_define_class": "class Solution:\n    def __init__(self):\n        self.mod = 10**9 + 7\n    def minNonZeroProduct(self, p):",
            "skeleton_class_end": "",
            "skeleton_solution_class": ""
        },
        {
            "id": 1917,
            "code_problem_id": 627,
            "language": {
                "id": 26,
                "name": "JavaScript (Node.js 12.14.0)",
                "judge0_language_id": 63
            },
            "skeleton_define_class": "class Solution{\n    constructor() {\n        this.mod = 1000000007n;\n    }\n\n      minNonZeroProduct(p) {\n",
            "skeleton_class_end": "}\n}",
            "skeleton_solution_class": ""
        }
    ]
}