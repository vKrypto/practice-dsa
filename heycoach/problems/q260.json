{
    "id": 260,
    "description": "\nGiven the root of a binary tree, return the `maximum width` of the given tree.\n\nThe `maximum width` of a tree is the maximum `width` among all levels.\n\nThe `width` of one level is defined as the length between the end-nodes (the leftmost and rightmost non-null nodes), where the null nodes between the end-nodes that would be present in a complete binary tree extending down to that level are also counted into the length calculation.\n\nIt is guaranteed that the answer will in the range of a `32-bit` signed integer.</br>\n\n**Input Format:**\n- The input consists of a series of integers representing node values in level order traversal of the binary tree. The value `null` is used to represent absent children.\n\n**Output Format:**\n- The output is a single integer representing the maximum width of the given binary tree.\n\n\n\n\n### Example 1\n\n![Image](https://assets.leetcode.com/uploads/2021/05/03/width1-tree.jpg)\n\n### Input\n\n```CPP\nroot = [1,3,2,5,3,null,9]\n```\n\n### Output\n\n```CPP\n4\n```\n\n#### Explanation:\n\nThe maximum width exists in the third level with length 4 (5,3,null,9).\n\n### Example 2\n\n![Image](https://assets.leetcode.com/uploads/2022/03/14/maximum-width-of-binary-tree-v3.jpg)\n\n### Input\n\n```CPP\nroot = [1,3,2,5,null,null,9,6,null,7]\n```\n\n### Output\n\n```CPP\n7\n```\n\n#### Explanation:\n\nThe maximum width exists in the fourth level with length 7 (6,null,null,null,null,null,7).\n\n### Constraints:\n\n- The number of nodes in the tree is in the range [1, 3000].\n- -100 <= Node.val <= 100\n",
    "title": "Width of a tree",
    "default_testcase": {
        "id": 1799,
        "input": "   1\n   2\n   3\nnull\n   4\n   9\n   0\n   5\n   1\nnull\n   4\n   9\n   0\n   5\n   1\nnull\nnull\n   4\n   9\n   0\n   5\n   4\n   9\n   0\n   5\n   1\n   9\n   0\n   5\n   1\n",
        "expected_output": "15",
        "code_problem_id": 260,
        "created_at": "2022-11-05T19:28:56.281Z",
        "updated_at": "2022-11-05T19:28:56.281Z"
    },
    "problem_type": "level_test",
    "code_skeletons": [
        {
            "id": 458,
            "code_problem_id": 260,
            "language": {
                "id": 11,
                "name": "C++ (GCC 9.2.0)",
                "judge0_language_id": 54
            },
            "skeleton_define_class": " int WidthofTheTree(struct Node* root){",
            "skeleton_class_end": "}",
            "skeleton_solution_class": ""
        },
        {
            "id": 529,
            "code_problem_id": 260,
            "language": {
                "id": 25,
                "name": "Java (OpenJDK 13.0.1)",
                "judge0_language_id": 62
            },
            "skeleton_define_class": "class WidthCalculator {\n    static int widthOfBinaryTree(Node root) {\n      // write your code here",
            "skeleton_class_end": "  }\n}",
            "skeleton_solution_class": ""
        },
        {
            "id": 866,
            "code_problem_id": 260,
            "language": {
                "id": 39,
                "name": "Python (3.8.1)",
                "judge0_language_id": 71
            },
            "skeleton_define_class": "class Solution:\n    def width_of_binary_tree(self, root):\n      #Write your code here",
            "skeleton_class_end": "",
            "skeleton_solution_class": ""
        },
        {
            "id": 867,
            "code_problem_id": 260,
            "language": {
                "id": 26,
                "name": "JavaScript (Node.js 12.14.0)",
                "judge0_language_id": 63
            },
            "skeleton_define_class": "class Solution {\n    widthOfBinaryTree(root) {\n      //Write your code here",
            "skeleton_class_end": "  }\n}",
            "skeleton_solution_class": ""
        }
    ]
}