{
    "id": 441,
    "description": "The school cafeteria offers circular and square sandwiches at lunch break, represented by numbers 0 and 1, respectively. All students stand in a queue, expressing their preference for either square or circular sandwiches.\n\nThe number of sandwiches in the cafeteria is equal to the number of students, and these sandwiches are placed in a stack. The lunch process unfolds as follows:\n\nIf the student at the front of the queue prefers the sandwich on the top of the stack, they will take it and leave the queue.\nOtherwise, they will leave the sandwich on the top of the stack and go to the end of the queue.\nThis process continues until none of the students in the queue want to take the top sandwich, rendering them unable to eat.\n\nYou are given two integer arrays, students and sandwiches, where sandwiches[i] represents the type (0 or 1) of the i\u200b\u200b\u200b\u200b\u200b\u200bth sandwich in the stack, and students[j] represents the preference (0 or 1) of the j\u200b\u200b\u200b\u200b\u200b\u200bth student in the initial queue. Your task is to return the number of students who are unable to eat.\n\n**`Input`**:\n\n```\nstudents: A list of integers representing the preferences of students (0 or 1).\nsandwiches: A list of integers representing the types of sandwiches in the stack (0 or 1).\n```\n\n**`Output`**:\n\n`An integer representing the number of students unable to eat.`\n\n**`Examples`**:</br>\n**`Example:1`**\n```\nstudents = [1, 1, 1, 0, 0, 1]\nsandwiches = [1, 0, 0, 0, 1, 1]\n```\n**`Output:`** </br>\n`3`\n\n**`Example2:`**</br>\n\n`students = [1, 1, 0, 0] ` \n`sandwiches = [0, 1, 0, 1] `\n  \n**`Output:`** \n\n`0`\n\n**`Constraints`**:\n\n- `1 <= students.length, sandwiches.length <= 100`\n- `students.length == sandwiches.length`\n- `sandwiches[i] is 0 or 1.`\n- `students[i] is 0 or 1.`",
    "title": "Number of students unable to eat lunch",
    "default_testcase": {
        "id": 5624,
        "input": "6\n1 1 1 0 0 1\n6\n1 0 0 0 1 1",
        "expected_output": "3",
        "code_problem_id": 441,
        "created_at": "2024-02-16T09:50:44.249Z",
        "updated_at": "2024-02-16T09:50:44.249Z"
    },
    "problem_type": "practice",
    "code_skeletons": [
        {
            "id": 1249,
            "code_problem_id": 441,
            "language": {
                "id": 11,
                "name": "C++ (GCC 9.2.0)",
                "judge0_language_id": 54
            },
            "skeleton_define_class": "    class Solution {\n        public:\n     int countStudents(vector<int>& students, vector<int>& sandwiches) {\n       //Write your code here",
            "skeleton_class_end": "    }\n};",
            "skeleton_solution_class": ""
        },
        {
            "id": 1250,
            "code_problem_id": 441,
            "language": {
                "id": 25,
                "name": "Java (OpenJDK 13.0.1)",
                "judge0_language_id": 62
            },
            "skeleton_define_class": "class Solution {\n    public int countStudents(List<Integer> students, List<Integer> sandwiches) {\n      //Write your code here",
            "skeleton_class_end": "    }\n}",
            "skeleton_solution_class": ""
        },
        {
            "id": 1251,
            "code_problem_id": 441,
            "language": {
                "id": 26,
                "name": "JavaScript (Node.js 12.14.0)",
                "judge0_language_id": 63
            },
            "skeleton_define_class": "class Solution {\n    countStudents(students, sandwiches) {\n      //Write your code here",
            "skeleton_class_end": "    }\n}",
            "skeleton_solution_class": ""
        },
        {
            "id": 1252,
            "code_problem_id": 441,
            "language": {
                "id": 39,
                "name": "Python (3.8.1)",
                "judge0_language_id": 71
            },
            "skeleton_define_class": "class Solution:\n    def count_students(self, students, sandwiches):",
            "skeleton_class_end": null,
            "skeleton_solution_class": ""
        }
    ]
}