{
    "id": 456,
    "description": "You're a daring jewel thief infiltrating the vault of the century, protected by a complex combination lock. Each dial holds a glittering gem, their values encoded in integers (represented by the nums array).  \nTo crack the lock, you need to arrange the gems in a specific order: for each adjacent pair, either the first gem's value must divide evenly into the second's, or vice versa. But cracking such a combination requires more than just brute force!\n\nYou're given an array of nums containing the values of the vault's gems (n distinct positive integers between 1 and 10^9).  \nYour mission is to find the total number of possible \"special\" arrangements of these gems, where every pair satisfies the divisibility requirement (i.e., forms a harmonious sequence).\nSince the number of special arrangements can be huge, you need to return the answer modulo 10^9 + 7 to avoid numerical overflows.\n\n\n----------\n\n\n\n### `Input/Output Format:`\n\n#### `Input:`\n `An array nums containing the gem values separated by spaces or commas.`\n\n#### `Output:`\n`Return a single integer representing the total number of special gem arrangements modulo 10^9 + 7.`\n\n#### `Examples:`\n\n#### `Input:` \n`2 3 6 (Three gems in the vault)`\n\n#### `Output:` \n`2 (Only two arrangements work: [3 6 2] and [2 6 3])`\n\n#### `Input:` \n`1 4 3 (Another vault to plunder)`\n\n#### `Output:` \n`2 (Similar to the first example, only two special arrangements exist: [3 1 4] and [4 1 3])`\n\n\n----------\n\n\n### `Constraints:`\n\n- `2 <= n <= 14 (Number of gems in the vault)` <br>\n- `1 <= nums[i] <= 10^9 (Individual gem value)`\n",
    "title": "Special Arrangements",
    "default_testcase": {
        "id": 5683,
        "input": "3\n2 3 6",
        "expected_output": "2\n",
        "code_problem_id": 456,
        "created_at": "2024-02-17T06:27:05.579Z",
        "updated_at": "2024-02-17T06:27:05.579Z"
    },
    "problem_type": "practice",
    "code_skeletons": [
        {
            "id": 1293,
            "code_problem_id": 456,
            "language": {
                "id": 11,
                "name": "C++ (GCC 9.2.0)",
                "judge0_language_id": 54
            },
            "skeleton_define_class": "class Solution {\npublic:\n    int specialArr(vector<int>& nums) {\n      //Write your code here",
            "skeleton_class_end": "    }\n};",
            "skeleton_solution_class": ""
        },
        {
            "id": 1337,
            "code_problem_id": 456,
            "language": {
                "id": 25,
                "name": "Java (OpenJDK 13.0.1)",
                "judge0_language_id": 62
            },
            "skeleton_define_class": "class Solution {\n      public int specialArr(List<Integer> nums) {\n        //Write your code here",
            "skeleton_class_end": "   }\n}",
            "skeleton_solution_class": ""
        },
        {
            "id": 1338,
            "code_problem_id": 456,
            "language": {
                "id": 39,
                "name": "Python (3.8.1)",
                "judge0_language_id": 71
            },
            "skeleton_define_class": "class Solution:\n    def special_arr(self, nums):\n      #Write your code here",
            "skeleton_class_end": null,
            "skeleton_solution_class": ""
        },
        {
            "id": 1419,
            "code_problem_id": 456,
            "language": {
                "id": 26,
                "name": "JavaScript (Node.js 12.14.0)",
                "judge0_language_id": 63
            },
            "skeleton_define_class": "class Solution{\n    specialArr(nums) {\n      //Write your code here;",
            "skeleton_class_end": "    }\n}",
            "skeleton_solution_class": ""
        }
    ]
}