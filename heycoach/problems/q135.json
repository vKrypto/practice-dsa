{
    "id": 135,
    "description": "Given an array **arr** containing **n** non-negative integers and an element **x**, in one operation **x** can be added to or subtracted from any element of the array. MEX of the array is defined as the smallest non-negative integer which is not present in the array.\n\nFind the maximum possible MEX of the array that can be achieved by doing the above operation any number of times.\n\n#### Input Format:\n- first line contains two integer n (size of the array) and x.\n- second line contains n integers (element of the array)\n\n#### Output Format:\n- single integer output\n\n#### Constraints:\n-  1<=n<=10^5\n- 0<=arr[i]<=10^9\n- 1<=x<=10^5\n\n#### Example:\n**Input** : 5 3\n0 1 2 1 3\n\n**Output**: 5",
    "title": "Get Maximum MEX",
    "default_testcase": null,
    "problem_type": "practice",
    "code_skeletons": [
        {
            "id": 174,
            "code_problem_id": 135,
            "language": {
                "id": 11,
                "name": "C++ (GCC 9.2.0)",
                "judge0_language_id": 54
            },
            "skeleton_define_class": null,
            "skeleton_class_end": null,
            "skeleton_solution_class": "class Solution {\npublic:\n  void solve(vector<int> &arr,int x) {\n    \n  } \n};"
        },
        {
            "id": 183,
            "code_problem_id": 135,
            "language": {
                "id": 25,
                "name": "Java (OpenJDK 13.0.1)",
                "judge0_language_id": 62
            },
            "skeleton_define_class": null,
            "skeleton_class_end": null,
            "skeleton_solution_class": "class Solution {\n  public void solve(Vector<Integer> arr,int x) {\n    \n  } \n}\n"
        },
        {
            "id": 191,
            "code_problem_id": 135,
            "language": {
                "id": 39,
                "name": "Python (3.8.1)",
                "judge0_language_id": 71
            },
            "skeleton_define_class": null,
            "skeleton_class_end": null,
            "skeleton_solution_class": "class Solution:\n    def solve(self, arr, x):\n        pass\n"
        }
    ]
}