{
    "id": 346,
    "description": "Determine the cheapest flight cost from a source city to a destination city, given a maximum number of allowed stops.\n\n**Input**:\n- `n`: `An integer representing the number of cities (1 <=` `n` `<= 100).`\n- `flights`: `A list of flights, where` `flights[i] = [from_i, to_i, price_i]` `indicates that there is a flight from city` `from_i` to city `to_i` `with cost` `price_i`.\n- `src`: `An integer representing the source city (0 <= ``src` < `n`).\n- `dst`: `An integer representing the destination city (0 <=` `dst` < `n`, `src` != `dst`).\n- `k`: `An integer representing the maximum number of stops allowed on the route (0 <=` `k` < `n`).\n\n**Output**:\n- `An integer representing the cheapest price to travel from `src` to `dst` with at most `k` stops. If no such route exists, return -1.`\n\n**Examples**:\n\n **Input**:</br> `n = 3,`</br>                \n `flights = [[0,1,100],[1,2,100],[0,2,500]],` </br></br>`src = 0, dst = 2, k = 1`</br>\n   \n   **Output**:</br> `200`\n   \n   **Explanation**: `The cheapest route from city 0 to city 2 with at most 1 stop is via city 1. The total cost is 100 (0 to 1) + 100 (1 to 2) = 200.`\n\n**Constraints**:\n- `1 <= `n` <= 100`\n- `0 <=  flights.length <= (`n` * (`n` - 1) / 2)`\n- `flights[i].length  == 3`\n- `0 <= from_i, to_i < n, from_i != to_i`\n- `1 <= price_i  <= 10^4`\n- `There will not be any multiple flights between two cities.`\n- `0 <=` `src`, `dst`, `k` < `n`, `src` != `dst`",
    "title": "Optimal Flight Cost",
    "default_testcase": {
        "id": 5788,
        "input": "3 0 2 1\n0 1 100\n1 2 100\n0 2 500",
        "expected_output": "200",
        "code_problem_id": 346,
        "created_at": "2024-02-17T17:10:25.216Z",
        "updated_at": "2024-02-17T17:10:25.216Z"
    },
    "problem_type": "session_assignment",
    "code_skeletons": [
        {
            "id": 809,
            "code_problem_id": 346,
            "language": {
                "id": 11,
                "name": "C++ (GCC 9.2.0)",
                "judge0_language_id": 54
            },
            "skeleton_define_class": "class Solution {\npublic:\n    int findCheapestPrice(int n, vector<vector<int>>& flights, int src, int dst, int k) {\n      //Write your code here \n       ",
            "skeleton_class_end": "  }\n};",
            "skeleton_solution_class": ""
        },
        {
            "id": 1032,
            "code_problem_id": 346,
            "language": {
                "id": 25,
                "name": "Java (OpenJDK 13.0.1)",
                "judge0_language_id": 62
            },
            "skeleton_define_class": "class Solution {\n    public int findCheapestPrice(int n, int[][] flights, int src, int dst, int k) {\n       //Write your code here \n        \n    ",
            "skeleton_class_end": "   }\n}",
            "skeleton_solution_class": ""
        },
        {
            "id": 1033,
            "code_problem_id": 346,
            "language": {
                "id": 39,
                "name": "Python (3.8.1)",
                "judge0_language_id": 71
            },
            "skeleton_define_class": "class Solution:\n    def findCheapestPrice(self, n, flights, src, dst, k):\n        #Write your code here \n       ",
            "skeleton_class_end": "",
            "skeleton_solution_class": ""
        },
        {
            "id": 1034,
            "code_problem_id": 346,
            "language": {
                "id": 26,
                "name": "JavaScript (Node.js 12.14.0)",
                "judge0_language_id": 63
            },
            "skeleton_define_class": "class Solution {\n    findCheapestPrice(n, flights, src, dst, k) {\n       //Write your code here \n\n    ",
            "skeleton_class_end": "   }\n}",
            "skeleton_solution_class": ""
        }
    ]
}