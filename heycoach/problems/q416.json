{
    "id": 416,
    "description": "\nThere are n food stations along a circular route, where the amount of food at the ith station is `food[i]`.\n\nYou have a body with an unlimited storage capacity for food, and it costs `cost[i]` of food to travel from the ith station to its next `(i + 1)th` station. You begin your journey with an empty stomach at one of the food stations.\n\nGiven two integer arrays food and cost, return the starting food station's index if you can travel around the circuit once in the clockwise direction without running out of food, otherwise return -1. If there exists a solution, it is guaranteed to be unique.\n\n\n\n\n**Example 1:**\n\n#### Input: \n`food = [1,2,3,4,5],  cost = [3,4,5,1,2]`\n\n#### Output : \n3\n\n\n**Example 2:**\n\n#### Input : \n`food = [2,3,4],  cost = [3,4,3]`\n\n#### Output: \n`-1`\n\n\n**Constraints**:\n\n- `n == food.length() == cost.length()`\n\n- `2 <= n <= 200000`\n\n- `0 <= food[i], cost[i] <= 10000`\n",
    "title": "Foodie",
    "default_testcase": {
        "id": 2982,
        "input": "5\n1 2 3 4 5\n3 4 5 1 2",
        "expected_output": "3\n",
        "code_problem_id": 416,
        "created_at": "2023-12-14T12:11:59.237Z",
        "updated_at": "2023-12-14T12:11:59.237Z"
    },
    "problem_type": "session_assignment",
    "code_skeletons": [
        {
            "id": 1186,
            "code_problem_id": 416,
            "language": {
                "id": 11,
                "name": "C++ (GCC 9.2.0)",
                "judge0_language_id": 54
            },
            "skeleton_define_class": "class Solution {\npublic:\n    int canCompleteCircuit(vector<int>& food, vector<int>& cost) {",
            "skeleton_class_end": "}\n};",
            "skeleton_solution_class": "\n\n"
        },
        {
            "id": 1187,
            "code_problem_id": 416,
            "language": {
                "id": 39,
                "name": "Python (3.8.1)",
                "judge0_language_id": 71
            },
            "skeleton_define_class": "class Solution:\n    def canCompleteCircuit(self, food, cost):",
            "skeleton_class_end": "",
            "skeleton_solution_class": "\n\n"
        },
        {
            "id": 1188,
            "code_problem_id": 416,
            "language": {
                "id": 25,
                "name": "Java (OpenJDK 13.0.1)",
                "judge0_language_id": 62
            },
            "skeleton_define_class": "class Solution {\n    public int canCompleteCircuit(int[] food, int[] cost) {\n      //Write your code here",
            "skeleton_class_end": "}\n}",
            "skeleton_solution_class": "\n"
        },
        {
            "id": 1189,
            "code_problem_id": 416,
            "language": {
                "id": 26,
                "name": "JavaScript (Node.js 12.14.0)",
                "judge0_language_id": 63
            },
            "skeleton_define_class": "class Solution {\n    canCompleteCircuit(food, cost) {",
            "skeleton_class_end": "}\n}",
            "skeleton_solution_class": ""
        }
    ]
}