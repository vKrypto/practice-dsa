{
    "id": 221,
    "description": "Suppose an array of length  `n`  sorted in ascending order is  **rotated**  between  `1`  and  `n`  times. For example, the array  `nums = [0,1,2,4,5,6,7]`  might become:\n\n-   `[4,5,6,7,0,1,2]`  if it was rotated  `4`  times.\n-   `[0,1,2,4,5,6,7]`  if it was rotated  `7`  times.\n\nNotice that  **rotating**  an array  `[a[0], a[1], a[2], ..., a[n-1]]`  1 time results in the array  `[a[n-1], a[0], a[1], a[2], ..., a[n-2]]`.\n\nGiven the sorted rotated array  `nums`  of  **unique**  elements, return  _the minimum element of this array_.\n\nYou must write an algorithm that runs in `O(log n) time.`\n### Example 1 \n\n### Input\n```CPP\nnums = [3,4,5,1,2]\n```\n### Output \n```CPP\n1\n```\n### Explanation\n\nThe original array was [1,2,3,4,5] rotated 3 times.\n\n**Example 2:**\n\n**Input:**\n```CPP\nnums = [4,5,6,7,0,1,2]\n```\n**Output:** \n```CPP\n0\n```\n\n### Constraints:\n-   `n == nums.length`\n-   `1 <= n <= 10000`\n-   `0 <= nums[i] <= 50000`\n-   All the integers of  `nums`  are  **unique**.\n-   `nums`  is sorted and rotated between  `1`  and  `n`  times.",
    "title": "Minimum in rotated sorted array",
    "default_testcase": {
        "id": 1562,
        "input": "5\n3 4 5 1 2",
        "expected_output": "1",
        "code_problem_id": 221,
        "created_at": "2022-10-31T13:02:58.411Z",
        "updated_at": "2022-10-31T13:02:58.411Z"
    },
    "problem_type": "practice",
    "code_skeletons": [
        {
            "id": 321,
            "code_problem_id": 221,
            "language": {
                "id": 11,
                "name": "C++ (GCC 9.2.0)",
                "judge0_language_id": 54
            },
            "skeleton_define_class": null,
            "skeleton_class_end": null,
            "skeleton_solution_class": "class Solution {\npublic:\n    int findMin(vector<int>& nums) {\n      // write your code here\n    }\n};\n"
        }
    ]
}