
# Generated by CodiumAI
import pytest

from collections import defaultdict
class Solution:

    def longDrive(self,edges, query):
        graph = defaultdict(list)
        for u, v, w in edges:
            graph[u].append((v, w))
            graph[v].append((u, w))
            
        memo = {}
        def dfs(node, parent):
            if (node, parent) in memo:
                return memo[(node, parent)]

            max_distance = 0
            for neighbor, edge_distance in graph[node]:
                if neighbor != parent:
                    max_distance = max(max_distance, dfs(neighbor, node) + edge_distance)

            memo[(node, parent)] = max_distance
            return max_distance

        longest_distances = []
        for start_city in query:
            longest_distances.append(dfs(start_city, None))

        return longest_distances
        
        
class TestLongdrive:
    # Tests that the method returns an empty list when given a small graph with only one node and no query
    def test_small_graph_one_node_no_query(self):
        edges = [(0, 0, 0)]
        query = []
        assert Solution().longDrive(edges, query) == []

    # Tests that the method returns the correct longest distance when given a small graph with only one node and one query
    def test_small_graph_one_node_one_query(self):
        edges = [(0, 0, 0)]
        query = [0]
        solution = Solution()
        assert solution.longDrive(edges, query) == [0]

    # Tests that the method returns the correct longest distance when given a small graph with multiple nodes and one query
    def test_small_graph_multiple_nodes_one_query(self):
        edges = [(0, 1, 1), (1, 2, 2), (2, 3, 3)]
        query = [0]
        assert Solution().longDrive(edges, query) == [6]

    # Tests that the method returns the correct longest distances when given a small graph with multiple nodes and multiple queries
    def test_small_graph_multiple_nodes_multiple_queries(self):
        edges = [(0, 1, 1), (1, 2, 2), (2, 3, 3)]
        query = [0, 1, 2]
        assert Solution().longDrive(edges, query) == [6, 5, 3]

    # Tests that the method returns an empty list when given an empty graph and no query
    def test_empty_graph_no_query(self):
        solution = Solution()
        edges = []
        query = []
        assert solution.longDrive(edges, query) == []

    # Tests that the method raises a KeyError when given a graph with multiple nodes and one query where the start city is not in the graph
    def test_graph_multiple_nodes_one_query_start_city_not_in_graph(self):
        edges = [(0, 1, 1), (1, 2, 2), (2, 3, 3)]
        query = [4]
        solution = Solution()
        longest_distances = solution.longDrive(edges, query)
        assert longest_distances == [0]